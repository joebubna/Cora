<?PHP
namespace Cora;

class Route extends Framework {
    
    protected $pathString;
    protected $path;
    protected $controllerPath;      // STRING - filepath to controller .php file.
    protected $controllerOffset;    // INT - The offset within the path array of the controller.
    
    
    function __construct() {
        parent::__construct(); // Call parent constructor too so we don't lose functionality.
                
        // Figure out and set pathString. E.g. "/controller/method/id"
        $this->pathString = explode($this->config['site_url'], $_SERVER['REQUEST_URI'], 2)[1];
        
        // Setup Path array
        $this->path = explode('/', $this->pathString);
        
        // Debug
        $this->debug('Route: ' . $this->pathString);

    }
    
    
    /**
     *  Searches through $path to figure out what part of it is the controller.
     *  This requires searching through the filesystem.
     *
     *  If   $path = /folder1/folder2/Controller/Method/Id
     *  Then $controllerPath    = '/folder1/folder2/Controller'
     *  And  $controllerOffset  = 2
     *
     *  NOTE: This is a recursive function.
     */
    public function routeFind($basePath = '', $offset = 0) {
        
        // Vars setup
        $curPath = $this->partialPathArray($offset, 1);
        $controller = '';
        $controllerFileName = '';
        
        // if $path isn't empty
        if ( is_array($curPath) and !empty($curPath) ) {
            $controller = $curPath[0];
            $controllerFileName =   $this->config['controllersPrefix'] .
                                    $curPath[0] .
                                    $this->config['controllersPostfix'] .
                                    '.php';
        }   
        else {
            $controller = $this->config['default_controller'];
            $controllerFileName =   $this->config['controllersPrefix'] .
                                    $this->config['default_controller'] .
                                    $this->config['controllersPostfix'] .
                                    '.php';
        }

        // Set working filepath.
        $dirpath = $this->config['pathToControllers'].$basePath.$controller;
        $filepath = $this->config['pathToControllers'].$basePath.$controllerFileName;

        // Debug
        $this->debug('Searching for: ' . $filepath);

        // Check if the controller .php file exists in this directory.
        if ( file_exists($filepath) ) {
            $this->controllerPath = $this->partialPathString(0, $offset+1);
            $this->controllerOffset = $offset;
            
            $this->debug('File Found: ' . $controllerFileName);
            $this->debug('Controller Path: ' . $this->controllerPath);
        }

        // Else check if there's a matching directory we can look through.
        else if ( is_dir($dirpath) ) {
            $this->debug('Directory Found: ' . $basePath . $controller);
            
            // Recursive call
            $this->routeFind($basePath . $controller . '/', $offset+1);
        }
        
    } // end routeFind
    
    
    /**
     *  Uses the info generated by routeFind() to then create an instance of the
     *  appropriate controller and call the desired method.
     */
    public function routeExec() {
        
        // Load generic Cora parent class
        require('Cora.php');
        
        // If no controller was found by routeFind()...
        if ( !isset($this->controllerPath) ) {
            $this->error404();
            exit;
        }
        
        // Include the controller code.
        $cPath =    $this->config['pathToControllers'] . 
                    $this->getPath($this->controllerPath) .
                    $this->config['controllersPrefix'] .
                    $this->getName($this->controllerPath) .
                    $this->config['controllersPostfix'] .
                    '.php';

        require($cPath);
        
        // Create an instance of the controller.
        $controller = new $this->path[$this->controllerOffset]($this);
        
        // Figure out method to be called, or use default.
        $method = '';
        if ( isset($this->path[$this->controllerOffset+1]) ) {
            $method = $this->path[$this->controllerOffset+1];
            
            if ($method == '')
                $method = $this->config['default_controller'];
        }
        else
            $method = $this->config['default_controller'];
        
        // RESTful routing:
        // Modify method routed to if request is not of type GET.
        if ($this->config['enable_RESTful']) {
            $httpMethod = $_SERVER['REQUEST_METHOD'];
            
            switch ($httpMethod) {
                case 'PUT':
                    $method = $method.'PUT';
                    break;
                case 'POST':
                    $method = $method.'POST';
                    break;
                case 'DELETE':
                    $method = $method.'DELETE';
                    break;
            }
        }
        
        // If that method exists, call it or output 404 error.
        if ( method_exists($controller, $method) ) {
            
            // PHP7 Version
            // $controller->$method(...$this->partialPathArray($this->controllerOffset+2));
            
            // Older PHP compatible version
            /** Maps an array of arguments derived from the URL into a method with a comma
             *  delimited list of parameters. Calls the method.
             *
             *  I.E. If the URL is:
             *  'www.mySite.com/MyController/FooBar/Param1/Param2/Param3'
             *
             *  And the FooBar method within MyController is defined as:
             *  public function FooBar($a, $b, $c) {}
             *
             *  $a will have the value 'Param1'
             *  $b will have the value 'Param2'  ... and so forth.
             */
            call_user_func_array( array($controller, $method), $this->partialPathArray($this->controllerOffset+2) );
            
        }
        else {
            $this->error404();
        }
    } // end routeExec
    
    
    public function exists() {
        if ( !isset($this->controllerPath) ) {
            return false;
        }
        return true;
    }

    
    
    protected function partialPathString($offset, $length = null) {
        $partialPathArray = array_slice($this->path, $offset, $length);
        return implode('/', $partialPathArray);
    }
    
    
    protected function partialPathArray($offset, $length = null) {
        return array_slice($this->path, $offset, $length);
    }
    
    protected function error404() {
        
        // Grab load object.
        $load = new Load();
        
        // Set 404 Page data.
        $data = new \stdClass();
        $data->title = '404 Not Found';
        $data->content = $load->view('errors/404', null, true);
        
        // Show 404 to user.
        $load->view('', $data);
        exit;
    }
    
    
}