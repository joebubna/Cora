<?PHP
namespace Cora;

class Framework {
    
    protected $config;
    protected $pathString;
    protected $path;
    protected $controllerPath;      // STRING - filepath to controller .php file.
    protected $controllerOffset;    // INT - The offset within the path array of the controller.
    
    
    function __construct() {
        
        // Load and set config.
        require_once(dirname(__FILE__).'/../config/cora.php');
        $this->config = $config;
        
        // Figure out and set pathString. E.g. "/controller/method/id"
        $this->pathString = explode($config['site_url'], $_SERVER['REQUEST_URI'], 2)[1];
        
        // Setup Path array
        $this->path = explode('/', $this->pathString);
        
        // Debug
        $this->debug('Route: ' . $this->pathString);

    }
    
    
    /**
     *  Searches through $path to figure out what part of it is the controller.
     *  This requires searching through the filesystem.
     *
     *  If   $path = /folder1/folder2/Controller/Method/Id
     *  Then $controllerPath    = '/folder1/folder2/Controller'
     *  And  $controllerOffset  = 2
     *
     *  NOTE: This is a recursive function.
     */
    public function routeFind($basePath = '', $offset = 0) {
        
        // Vars setup
        $curPath = $this->partialPathArray($offset, 1);
        $p = '';
        
        // if $path isn't empty
        if ( is_array($curPath) and !empty($curPath)) {
            $p = $curPath[0];
        }   
        else {
            $p = $this->config['default_controller'];
        }

        // Set working filepath.
        $filepath = dirname(__FILE__).'/../controllers/'.$basePath.$p;

        // Debug
        $this->debug('Searching for: ' . $filepath);

        // Check if the controller .php file exists in this directory.
        if ( file_exists($filepath.'.php') ) {
            $this->controllerPath = $this->partialPathString(0, $offset+1);
            $this->controllerOffset = $offset;
            
            $this->debug('File Found: ' . $p . '.php');
            $this->debug('Controller Path: ' . $this->controllerPath);
        }

        // Else check if there's a matching directory we can look through.
        else if ( is_dir($filepath) ) {
            $this->debug('Directory Found: ' . $basePath . $p);
            
            // Recursive call
            $this->routeFind($basePath . $p . '/', $offset+1);
        }

        // Return 404 error view
        else {
            $this->error404();
        }
        
    } // end routeFind
    
    
    /**
     *  Uses the info generated by routeFind() to then create an instance of the
     *  appropriate controller and call the desired method.
     */
    public function routeExec() {
        
        // Load generic Cora parent class
        require(dirname(__FILE__).'/Cora.php');
        
        // Include the controller code.
        require(dirname(__FILE__).'/../controllers/'.$this->controllerPath.'.php');
        
        // Create an instance of the controller.
        $controller = new $this->path[$this->controllerOffset]($this);
        
        // Figure out method to be called, or use default.
        $method = '';
        if ( isset($this->path[$this->controllerOffset+1]) ) {
            $method = $this->path[$this->controllerOffset+1];
            
            if ($method == '')
                $method = $this->config['default_controller'];
        }
        else
            $method = $this->config['default_controller'];
        
        // RESTful routing:
        // Modify method routed to if request is not of type GET.
        if ($this->config['enable_RESTful']) {
            $httpMethod = $_SERVER['REQUEST_METHOD'];
            
            switch ($httpMethod) {
                case 'PUT':
                    $method = $method.'PUT';
                    break;
                case 'POST':
                    $method = $method.'POST';
                    break;
                case 'DELETE':
                    $method = $method.'DELETE';
                    break;
            }
        }
        
        // If that method exists, call it or output 404 error.
        if ( method_exists($controller, $method) ) {
            
            // PHP7 Version
            // $controller->$method(...$this->partialPathArray($this->controllerOffset+2));
            
            // Older PHP compatible version
            call_user_func_array( array($controller, $method), $this->partialPathArray($this->controllerOffset+2) );
        }
        else {
            $this->error404();
        }
    } // end routeExec

    
    /**
     *  Include specified model.
     */
    public function model($pathname) {
        $fullPath = dirname(__FILE__).'/../classes/'.$pathname.'.php';
        include($fullPath);
    }
    
    
    /**
     *  Load view OR return view depending on 2nd parameter.
     */
    public function view($pathname = '', $data = false, $return = false) {
        
        // If no pathname specified, grab template name.
        if ($pathname == '')
            $pathname = $this->config['template'];
        
        // Determine full filepath to View
        $fullPath = dirname(__FILE__).'/../views/'.$pathname.'.php';
        
        // Either return the view for storage in a variable, or output to browser.
        if ($return) {
            ob_start();
            include($fullPath);
            return ob_get_clean();
        }
        else {
            include($fullPath);
        }
    }
    
    
    protected function partialPathString($offset, $length = null) {
        $partialPathArray = array_slice($this->path, $offset, $length);
        return implode('/', $partialPathArray);
    }
    
    
    protected function partialPathArray($offset, $length = null) {
        return array_slice($this->path, $offset, $length);
    }
    
    
    protected function debug($message = '', $newLine = true) {
        if ($this->config['debug'] == true) {
            echo $message;
            if ($newLine) echo '<br>';
        }
    }
    
    protected function debugArray($arr) {
        if ($this->config['debug'] == true) {
            echo '<pre>';
            print_r($arr);
            echo '</pre>';
        }
    }
    
    protected function error404() {
        $data = new \stdClass();
        $data->title = '404 Not Found';
        $data->content = $this->view('errors/404', null, true);
        $this->view('', $data);
        exit;
    }
    
    
}