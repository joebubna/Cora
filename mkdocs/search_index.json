{
    "docs": [
        {
            "location": "/",
            "text": "About Cora\n\n\nCora is an MVC style framework for rapidly building scalable web applications. \nThe goal of the project is to make a powerful and well-built infrastructure that is EASY TO USE and well documented. \nThis is a project aimed at experienced world-class developers and the just starting out novice alike. We don't shy away\nfrom advanced design patterns, but rather make every effort to encapsulate that complexity away from the developer\nso that they can focus on creating apps, not wrestling with a framework. Our hope\nis that this results in cleaner, more understandable code for all involved.\n\n\nCore Values\n\n\n\n\nCora should be easy to use.\n\n\nYou shouldn't need to spend a lot of time configuring things to get up and running.\n\n\nYou shouldn't need a degree in computer science to understand what is going on.\n\n\nYou shouldn't need to take a class on how to use the framework.\n\n\nThe framework should make your life as a developer easier, and help you work faster and better.\n\n\n\n\n\n\nLearning should fun.\n\n\nDocumentation should be useful to both experienced and novice developers alike.\n\n\nDocumentation should provide the needed info to experienced developers at a glance.\n\n\nMore in-depth documentation should be written in a ELI5 (Explain it Like I'm 5) style of explanation.\n\n\nDocumentation should be full of great examples to help bring understanding of the concepts.\n\n\n\n\n\n\nFlexible, Powerful, and Simple - Choose 3.\n\n\nCora should be able to accomodate a variety of programming styles.\n\n\nCora should be integratable into existing software projects.\n\n\nCora should provide developers with powerful tools to help make developing easier/faster.\n\n\nCora should be fully extendable and customizable.\n\n\nCora should do all this while staying simple.\n\n\n\n\n\n\n\n\nBeing a Trend-Setter for PHP\n\n\nPHP originally gained massive popularity for it's ease of entry and wide availability. While the wide availability is still there, \nit feels as though that focus on making PHP accessible to the masses has fallen off in recent years. As a result it could be argued that PHP\nhas lost its sense of identity, leaving it only as a mediocre contender amongst the group of popular programming languages where it can be argued that PHP has a syntax that\nis sub-par and lots of left-over baggage from it's pre-OOP days.\n\n\nIt's the hope of the Cora project to bring back that sense of excitement and identity that made PHP a standout language for so many years.\n\n\n\n\nNext: Installation",
            "title": "About"
        },
        {
            "location": "/#about-cora",
            "text": "Cora is an MVC style framework for rapidly building scalable web applications. \nThe goal of the project is to make a powerful and well-built infrastructure that is EASY TO USE and well documented. \nThis is a project aimed at experienced world-class developers and the just starting out novice alike. We don't shy away\nfrom advanced design patterns, but rather make every effort to encapsulate that complexity away from the developer\nso that they can focus on creating apps, not wrestling with a framework. Our hope\nis that this results in cleaner, more understandable code for all involved.",
            "title": "About Cora"
        },
        {
            "location": "/#core-values",
            "text": "Cora should be easy to use.  You shouldn't need to spend a lot of time configuring things to get up and running.  You shouldn't need a degree in computer science to understand what is going on.  You shouldn't need to take a class on how to use the framework.  The framework should make your life as a developer easier, and help you work faster and better.    Learning should fun.  Documentation should be useful to both experienced and novice developers alike.  Documentation should provide the needed info to experienced developers at a glance.  More in-depth documentation should be written in a ELI5 (Explain it Like I'm 5) style of explanation.  Documentation should be full of great examples to help bring understanding of the concepts.    Flexible, Powerful, and Simple - Choose 3.  Cora should be able to accomodate a variety of programming styles.  Cora should be integratable into existing software projects.  Cora should provide developers with powerful tools to help make developing easier/faster.  Cora should be fully extendable and customizable.  Cora should do all this while staying simple.",
            "title": "Core Values"
        },
        {
            "location": "/#being-a-trend-setter-for-php",
            "text": "PHP originally gained massive popularity for it's ease of entry and wide availability. While the wide availability is still there, \nit feels as though that focus on making PHP accessible to the masses has fallen off in recent years. As a result it could be argued that PHP\nhas lost its sense of identity, leaving it only as a mediocre contender amongst the group of popular programming languages where it can be argued that PHP has a syntax that\nis sub-par and lots of left-over baggage from it's pre-OOP days.  It's the hope of the Cora project to bring back that sense of excitement and identity that made PHP a standout language for so many years.   Next: Installation",
            "title": "Being a Trend-Setter for PHP"
        },
        {
            "location": "/setup/install/",
            "text": "Installation and Setup\n\n\nThere are three main ways you can download and start using Cora. The easiest is going to be just using Composer, \nthe 2nd easiest would be to clone the Github repository, and lastly you could just download the ZIP off Github.\nSee below for instructions for each. First before you do that though, make sure you have the needed supporting software\nrunning on your machine.\n\n\nSetting Up A Computer For PHP Development\n\n\nThroughout this documentation there are a few pieces of software which are assumed to be on your computer. If you don't have these programs,\nthen you'll need to get them if you want to follow along with any examples we give.\n\n\nRequired: \"AMP\" stack\n \n\nFirstly, it is necessary you have some sort of \"AMP\" stack available on your computer. If you aren't familiar with this term, it's usually short for\nApache+MySQL+PHP, but is used as a catch-all term for having a web server (like Apache), a database solution (such as MySQL),\nand a programming language (such as PHP or Python). If you are just getting into development work and do not already have this\nsetup available on your computer, see below for some recommendations on getting that in place:\n\n\n\n\nIf you are using Windows or Linux, we'd recommend trying \nXAMPP\n.\n\n\nIf you are using a Mac, we'd recommend trying \nMAMP\n.\n\n\n\n\nRequired: Git\n \n\nGit is a type of version control software. Its most important feature is it allows multiple developers \nto work on a project at the same time by automatically (mostly) combining the code written and allowing \neach developer to grab the latest version of the codebase when someone else submits changes. However, \nit's also highly useful when working alone too. It will allow you to easily undo code if you break something \nand want to return your project to an earlier point in time, it will allow you to work on multiple in-progress \nnew features simultaneously without worrying about one partially finished feature screwing things up for another piece, etc.\nSo it's essential if you end up working in a team, and useful if you're by yourself, and overall a REALLY good habit to get used\nto using it. Pretty much all software developers use Git nowadays.\n\n\nTo install Git:\n\n\n\n\nYour best bet is probably to download Github Desktop which includes a copy of Git with it: \nGithub Desktop\n.\n\n\nAlternatively you can check out the installation options \nhere\n.\n\n\n\n\nRequired: Terminal/Powershell Window\n \n\nGraphical User Interfaces (GUIs) are what made computing friendly for the average Joe Shmo and lead us to the digitally connected society \nwe have today. However, if you're planning on getting into development work, you'll find it much easier to do if you get familar with using a terminal.\nA terminal is just a text interface where you can give your computer commands. If you want to learn more about how to use terminals, try Googling \n\"beginnners guide to using a terminal\" and some results will pop up.\n\n\n\n\nUsing Windows\n: Search your computer for \"Powershell\". Then make a shortcut to Windows Powershell where you can easily access it. It's important to note that the Git install adds Unix style commands to it which you will need to follow along with our tutorials - SO MAKE SURE YOU INSTALL GIT from the instructions above!\n\n\nUsing a Mac\n: We'd recommend you download \niTerm2\n.\n\n\nUsing Linux\n: Let's be honest... you don't need me to tell you how to access the terminal. \ncough\n likey Ctrl+Alt+T \ncough\n\n\n\n\nHighly Recommended: Composer\n \n\nComposer is a dependancy manager that helps you install and update software libraries (aka code written by other people that\nyou end up using in your project). This includes Cora itself! You can use Composer as an easy way to install Cora (instructions in the \nInstallation Using Composer section below) and update to the latest version of Cora later on down the road if a newer release comes out\nafter you've already started your project (see \nHERE\n for details on using Composer with Cora).\n\n\n\n\nTo download Composer go here \nhttps://getcomposer.org/\n.\n\n\n\n\nInstallation Using Composer\n\n\nOpen up a Terminal window and navigate to the location where you'd like to put the Cora folder that holds the project files. \nIf you are installing to your root web directory, typically this will be named \"htdocs\" or \"public_html\". \n\n\nMac\n\n\nFor instance: if you're using a Mac and installed MAMP, you probably want to navigate to\n\n\ncd /Applications/MAMP/htdocs\n\n\n\n\nWindows\n\n\nIf you're using Windows and installed XAMPP, you likely want to go to\n\n\ncd C:\\xampp\\htdocs\n\n\n\n\nGet Cora\n\n\nOnce you are at the location you want to install Cora to, type:\n\n\nphp composer.phar create-project cora/cora\n\n\n\n\nOR if you installed Composer globally as part of your PATH (which we'd recommend doing if you know how) type:\n\n\ncomposer create-project cora/cora\n\n\n\n\nThat's it!\n If all went well you should now have a folder named \"Cora\" in your specified directory.\n\n\nInstallation Using Git\n\n\nOpen up a Terminal window and navigate to the location where you'd like to put the Cora folder that holds the project files. \nIf you are installing to your root web directory, typically this will be named \"htdocs\" or \"public_html\". \nFor instance: if you're using a Mac and installed MAMP, you probably want to navigate to\n\n\ncd /Applications/MAMP/htdocs\n\n\n\n\nIf you're using Windows and installed XAMPP, you likely want to go to\n\n\ncd C:\\xampp\\htdocs\n\n\n\n\nOnce you are at the location you want to install Cora to, type:\n\n\ngit clone https://github.com/joebubna/Cora.git\n\n\n\n\nThat's it!\n If all went well you should now have a folder named \"Cora\" in your specified directory.\n\n\nInstallation From ZIP File\n\n\nGo to \nhttps://github.com/joebubna/Cora\n and click the \"Download ZIP\" button on the right hand side\nof the page. Use your Finder or File Explorer in your OS and go to your web directory (probably either \"C:\\xampp\\htdocs\" if you're on Windows\nor \"/Applications/MAMP/htdocs\" if you're on a Mac). Unpack the contents of the ZIP file into this directory.\n\n\nThat's it!\n If all went well you should now have a folder named \"Cora\" in your specified directory.\n\n\nConfiguration to Get it Working\n\n\nThere's a few configuration options that might need to be setup first before you can start using Cora. Click below to continue to the Configuration instructions. \n\n\n\n\nNext: Configuration",
            "title": "Installation"
        },
        {
            "location": "/setup/install/#installation-and-setup",
            "text": "There are three main ways you can download and start using Cora. The easiest is going to be just using Composer, \nthe 2nd easiest would be to clone the Github repository, and lastly you could just download the ZIP off Github.\nSee below for instructions for each. First before you do that though, make sure you have the needed supporting software\nrunning on your machine.",
            "title": "Installation and Setup"
        },
        {
            "location": "/setup/install/#setting-up-a-computer-for-php-development",
            "text": "Throughout this documentation there are a few pieces of software which are assumed to be on your computer. If you don't have these programs,\nthen you'll need to get them if you want to follow along with any examples we give.  Required: \"AMP\" stack   \nFirstly, it is necessary you have some sort of \"AMP\" stack available on your computer. If you aren't familiar with this term, it's usually short for\nApache+MySQL+PHP, but is used as a catch-all term for having a web server (like Apache), a database solution (such as MySQL),\nand a programming language (such as PHP or Python). If you are just getting into development work and do not already have this\nsetup available on your computer, see below for some recommendations on getting that in place:   If you are using Windows or Linux, we'd recommend trying  XAMPP .  If you are using a Mac, we'd recommend trying  MAMP .   Required: Git   \nGit is a type of version control software. Its most important feature is it allows multiple developers \nto work on a project at the same time by automatically (mostly) combining the code written and allowing \neach developer to grab the latest version of the codebase when someone else submits changes. However, \nit's also highly useful when working alone too. It will allow you to easily undo code if you break something \nand want to return your project to an earlier point in time, it will allow you to work on multiple in-progress \nnew features simultaneously without worrying about one partially finished feature screwing things up for another piece, etc.\nSo it's essential if you end up working in a team, and useful if you're by yourself, and overall a REALLY good habit to get used\nto using it. Pretty much all software developers use Git nowadays.  To install Git:   Your best bet is probably to download Github Desktop which includes a copy of Git with it:  Github Desktop .  Alternatively you can check out the installation options  here .   Required: Terminal/Powershell Window   \nGraphical User Interfaces (GUIs) are what made computing friendly for the average Joe Shmo and lead us to the digitally connected society \nwe have today. However, if you're planning on getting into development work, you'll find it much easier to do if you get familar with using a terminal.\nA terminal is just a text interface where you can give your computer commands. If you want to learn more about how to use terminals, try Googling \n\"beginnners guide to using a terminal\" and some results will pop up.   Using Windows : Search your computer for \"Powershell\". Then make a shortcut to Windows Powershell where you can easily access it. It's important to note that the Git install adds Unix style commands to it which you will need to follow along with our tutorials - SO MAKE SURE YOU INSTALL GIT from the instructions above!  Using a Mac : We'd recommend you download  iTerm2 .  Using Linux : Let's be honest... you don't need me to tell you how to access the terminal.  cough  likey Ctrl+Alt+T  cough   Highly Recommended: Composer   \nComposer is a dependancy manager that helps you install and update software libraries (aka code written by other people that\nyou end up using in your project). This includes Cora itself! You can use Composer as an easy way to install Cora (instructions in the \nInstallation Using Composer section below) and update to the latest version of Cora later on down the road if a newer release comes out\nafter you've already started your project (see  HERE  for details on using Composer with Cora).   To download Composer go here  https://getcomposer.org/ .",
            "title": "Setting Up A Computer For PHP Development"
        },
        {
            "location": "/setup/install/#installation-using-composer",
            "text": "Open up a Terminal window and navigate to the location where you'd like to put the Cora folder that holds the project files. \nIf you are installing to your root web directory, typically this will be named \"htdocs\" or \"public_html\".",
            "title": "Installation Using Composer"
        },
        {
            "location": "/setup/install/#mac",
            "text": "For instance: if you're using a Mac and installed MAMP, you probably want to navigate to  cd /Applications/MAMP/htdocs",
            "title": "Mac"
        },
        {
            "location": "/setup/install/#windows",
            "text": "If you're using Windows and installed XAMPP, you likely want to go to  cd C:\\xampp\\htdocs",
            "title": "Windows"
        },
        {
            "location": "/setup/install/#get-cora",
            "text": "Once you are at the location you want to install Cora to, type:  php composer.phar create-project cora/cora  OR if you installed Composer globally as part of your PATH (which we'd recommend doing if you know how) type:  composer create-project cora/cora  That's it!  If all went well you should now have a folder named \"Cora\" in your specified directory.",
            "title": "Get Cora"
        },
        {
            "location": "/setup/install/#installation-using-git",
            "text": "Open up a Terminal window and navigate to the location where you'd like to put the Cora folder that holds the project files. \nIf you are installing to your root web directory, typically this will be named \"htdocs\" or \"public_html\". \nFor instance: if you're using a Mac and installed MAMP, you probably want to navigate to  cd /Applications/MAMP/htdocs  If you're using Windows and installed XAMPP, you likely want to go to  cd C:\\xampp\\htdocs  Once you are at the location you want to install Cora to, type:  git clone https://github.com/joebubna/Cora.git  That's it!  If all went well you should now have a folder named \"Cora\" in your specified directory.",
            "title": "Installation Using Git"
        },
        {
            "location": "/setup/install/#installation-from-zip-file",
            "text": "Go to  https://github.com/joebubna/Cora  and click the \"Download ZIP\" button on the right hand side\nof the page. Use your Finder or File Explorer in your OS and go to your web directory (probably either \"C:\\xampp\\htdocs\" if you're on Windows\nor \"/Applications/MAMP/htdocs\" if you're on a Mac). Unpack the contents of the ZIP file into this directory.  That's it!  If all went well you should now have a folder named \"Cora\" in your specified directory.",
            "title": "Installation From ZIP File"
        },
        {
            "location": "/setup/install/#configuration-to-get-it-working",
            "text": "There's a few configuration options that might need to be setup first before you can start using Cora. Click below to continue to the Configuration instructions.    Next: Configuration",
            "title": "Configuration to Get it Working"
        },
        {
            "location": "/setup/configuration/",
            "text": "Configuring Cora\n\n\nIF you installed Cora to your root web directory, it should already be working. Test by going to \n\n\nhttp://localhost/cora\n\n\n\n\nIf it loads something, then Cora is working. If it doesn't work, then you probably either need to enable .htaccess files usage in apache, \nenable mod_rewrite in apache, you changed the name of something before reaching this article, or you didn't install Cora to your root web directory.\nIf you are using one of the suggested AMP packages from the installation page, everything should theoretically be working though.\n\n\nIf you didn't install Cora into your root directory, no worries, you'll just need to run through the following config instructions first before\nthings will work.\n\n\nStep 1: Change the Name of the Directory to Match Your Project\n\n\nBy default, the folder for Cora that got copied into your web directory should be named \"cora\". Just a guess, but you probably want to change\nthis to match the name of the project you plan on building. If for instance you want to create an app called \"My Awesome Site\", go ahead and rename\nthat cora directory to \"MyAwesomeSite\". \n\n\nStep 2: Change Your .htaccess File to Match Your Directory Name\n\n\nContinuing our \"MyAwesomeSite\" example, next you would need to open up the hidden \".htaccess\" file located within that directory and change the third line \ndown to:\n\n\nRewriteBase /MyAwesomeSite\n\n\n\n\nOR, if you installed Cora into a subfolder within your web directory, then you will need to include the full path from your root like so:\n\n\nRewriteBase /someFolder/MyAwesomeSite\n\n\n\n\nPerformance Note\n \n\nWhile on this topic, it should be noted that using a .htaccess file does have a performance cost. If you are planning on making an enterprise level app\nthat serves a large number of users, you'll probably want to eventually get rid of the .htaccess file and instead place the mod_rewrite rules into your server config.\nDoing this is beyond the scope of this documentation, but it's just something of which you should be aware.\n\n\nStep 3: Update the Site_Url in Your Config\n\n\nNext you need to open up the \"cora/config/config.php\" file in your project. The full path to this file should look something similar to this:\n\n\n/htdocs/MyAwesomeSite/cora/config/config.php\n\n\n\n\nThe first thing you should see are some commented out examples of commonly changed options like:\n\n\n#$config['debug'] = true;\n#$config['debugHide'] = false;\n#$config['site_url'] = '/cora/';\n#$config['cora_extension'] = 'MyApp';\n\n\n\n\nNote that this config file overrides any defaults that are located in \n\n\n/htdocs/MyAwesomeSite/vendor/cora/cora-framework/system/config/config.php\n\n\n\n\nGo ahead and uncomment the line for 'site_url' and change the value to match your new directory name. If your project is embedded in\nsub-directories, you do not need to include the full path, just the name of the folder the Cora project files are within. Example:\n\n\n$config['site_url'] = '/MyAwesomeSite/';\n\n\n\n\nStep 4: Create Your Project Controller\n\n\nGo ahead and open up any of the example controllers that are included in the controllers directory. The class declaration should look something like:\n\n\nclass Articles extends \\MyApp {\n\n\n\n\nAnytime you create a new controller, you want to have it extend from some \"base\" controller, which in the case above is \"MyApp\". This allows you to\nhave shared data and methods across all your controllers when necessary. Although you can leave the name of this base controller as \"MyApp\" if you want to,\nwe're guessing you'll probably want to change this to something more offical sounding that matches the name of your project.\n\n\nNavigate to the \"cora/extensions/MyApp.php\" file in your project and make a copy of it, renaming the copy to \"MyAwesomeSite.php\". After you do this, make sure you open\nthe file and change the class name to MyAwesomeSite too. It should look like the following:\n\n\nclass MyAwesomeSite extends Cora\n\n\n\n\nThen go back and edit the Articles controller to extend from your new base class. Note that once you complete this setup guide and confirm everything is working, you'll then be able to go back and delete the MyApp file later if you want.\n\n\nStep 5: Make All Controllers Extend From Project Controller\n\n\nNow that you have your base project controller ready, you need to open up each of the controllers under your \"controllers\" directory and change them\nto extend from your new base controller instead of MyApp. They should all follow this format:\n\n\nclass Articles extends \\MyAwesomeSite {\n\n\n\n\nFinished!!!\n\n\nThat's it! You should be able to run your project and play around with it and the included demos now. \nIf you are an experienced user who wants to know about the advanced configuration options within Cora, or how Cora can be\nincorporated into an existing software project, click \nhere\n to view the advanced configuration tutorial.\nOtherwise, click below to continue on to the introductory tutorial to help you get acquainted with Cora.\n\n\n\n\nNext: Introduction to Cora",
            "title": "Configuration"
        },
        {
            "location": "/setup/configuration/#configuring-cora",
            "text": "IF you installed Cora to your root web directory, it should already be working. Test by going to   http://localhost/cora  If it loads something, then Cora is working. If it doesn't work, then you probably either need to enable .htaccess files usage in apache, \nenable mod_rewrite in apache, you changed the name of something before reaching this article, or you didn't install Cora to your root web directory.\nIf you are using one of the suggested AMP packages from the installation page, everything should theoretically be working though.  If you didn't install Cora into your root directory, no worries, you'll just need to run through the following config instructions first before\nthings will work.",
            "title": "Configuring Cora"
        },
        {
            "location": "/setup/configuration/#step-1-change-the-name-of-the-directory-to-match-your-project",
            "text": "By default, the folder for Cora that got copied into your web directory should be named \"cora\". Just a guess, but you probably want to change\nthis to match the name of the project you plan on building. If for instance you want to create an app called \"My Awesome Site\", go ahead and rename\nthat cora directory to \"MyAwesomeSite\".",
            "title": "Step 1: Change the Name of the Directory to Match Your Project"
        },
        {
            "location": "/setup/configuration/#step-2-change-your-htaccess-file-to-match-your-directory-name",
            "text": "Continuing our \"MyAwesomeSite\" example, next you would need to open up the hidden \".htaccess\" file located within that directory and change the third line \ndown to:  RewriteBase /MyAwesomeSite  OR, if you installed Cora into a subfolder within your web directory, then you will need to include the full path from your root like so:  RewriteBase /someFolder/MyAwesomeSite  Performance Note   \nWhile on this topic, it should be noted that using a .htaccess file does have a performance cost. If you are planning on making an enterprise level app\nthat serves a large number of users, you'll probably want to eventually get rid of the .htaccess file and instead place the mod_rewrite rules into your server config.\nDoing this is beyond the scope of this documentation, but it's just something of which you should be aware.",
            "title": "Step 2: Change Your .htaccess File to Match Your Directory Name"
        },
        {
            "location": "/setup/configuration/#step-3-update-the-site_url-in-your-config",
            "text": "Next you need to open up the \"cora/config/config.php\" file in your project. The full path to this file should look something similar to this:  /htdocs/MyAwesomeSite/cora/config/config.php  The first thing you should see are some commented out examples of commonly changed options like:  #$config['debug'] = true;\n#$config['debugHide'] = false;\n#$config['site_url'] = '/cora/';\n#$config['cora_extension'] = 'MyApp';  Note that this config file overrides any defaults that are located in   /htdocs/MyAwesomeSite/vendor/cora/cora-framework/system/config/config.php  Go ahead and uncomment the line for 'site_url' and change the value to match your new directory name. If your project is embedded in\nsub-directories, you do not need to include the full path, just the name of the folder the Cora project files are within. Example:  $config['site_url'] = '/MyAwesomeSite/';",
            "title": "Step 3: Update the Site_Url in Your Config"
        },
        {
            "location": "/setup/configuration/#step-4-create-your-project-controller",
            "text": "Go ahead and open up any of the example controllers that are included in the controllers directory. The class declaration should look something like:  class Articles extends \\MyApp {  Anytime you create a new controller, you want to have it extend from some \"base\" controller, which in the case above is \"MyApp\". This allows you to\nhave shared data and methods across all your controllers when necessary. Although you can leave the name of this base controller as \"MyApp\" if you want to,\nwe're guessing you'll probably want to change this to something more offical sounding that matches the name of your project.  Navigate to the \"cora/extensions/MyApp.php\" file in your project and make a copy of it, renaming the copy to \"MyAwesomeSite.php\". After you do this, make sure you open\nthe file and change the class name to MyAwesomeSite too. It should look like the following:  class MyAwesomeSite extends Cora  Then go back and edit the Articles controller to extend from your new base class. Note that once you complete this setup guide and confirm everything is working, you'll then be able to go back and delete the MyApp file later if you want.",
            "title": "Step 4: Create Your Project Controller"
        },
        {
            "location": "/setup/configuration/#step-5-make-all-controllers-extend-from-project-controller",
            "text": "Now that you have your base project controller ready, you need to open up each of the controllers under your \"controllers\" directory and change them\nto extend from your new base controller instead of MyApp. They should all follow this format:  class Articles extends \\MyAwesomeSite {",
            "title": "Step 5: Make All Controllers Extend From Project Controller"
        },
        {
            "location": "/setup/configuration/#finished",
            "text": "That's it! You should be able to run your project and play around with it and the included demos now. \nIf you are an experienced user who wants to know about the advanced configuration options within Cora, or how Cora can be\nincorporated into an existing software project, click  here  to view the advanced configuration tutorial.\nOtherwise, click below to continue on to the introductory tutorial to help you get acquainted with Cora.   Next: Introduction to Cora",
            "title": "Finished!!!"
        },
        {
            "location": "/setup/advanced/",
            "text": "Advanced Config Options\n\n\nDebugging\n\n\n$config['debug'] = false;\n$config['debugHide'] = false;\n\n\n\n\nThese options are for helping you problem solve if the router doesn't seem to be finding your\ncontroller. The \"hide\" option just makes the routing messages show up in the HTML comments.\n\n\nCase-Sensitivity\n\n\n$config['lowercase_url'] = true;\n\n\n\n\nBy default Cora converts URLs into lowercase so that you can have consistent behavior on case-sensitive servers (e.g. Linux systems) regardless of whether\nor not a user types capital letters into the URL. However, if you wanted your URLs to be case-sensitive, you can disable this option in the config. \n\n\nDefault Controller\n\n\n$config['default_controller'] = 'Home';\n\n\n\n\nIf a user just goes to your homepage 'www.mysite.com`, what controller should this request\nbe routed to? You can set that here.\n\n\nRESTful Routing\n\n\n$config['enable_RESTful'] = true;\n\n\n\n\nWe'd recommend against it, but if you want to turn off RESTful routing in Cora, you may do so.\nTo learn more about how routing works within Cora, see \nHERE\n.\n\n\nFile Paths\n\n\n$config['basedir'] = dirname(__FILE__).'/../../../../../';\n\n/**\n *  Path to models/classes directory relative to this file.\n */\n$config['pathToModels'] = $config['basedir'].'classes/';\n\n/**\n *  Path to views directory relative to this file.\n */\n$config['pathToViews'] = $config['basedir'].'views/';\n\n/**\n *  Path to controllers directory relative to this file.\n */\n$config['pathToControllers'] = $config['basedir'].'controllers/';\n\n/**\n *  Path to libraries directory relative to this file.\n */\n$config['pathToLibraries'] = $config['basedir'].'libraries/';\n\n/**\n *  Path to App's Cora directory relative to this file.\n */\n$config['pathToCora'] = $config['basedir'].'cora/';\n\n\n\n\nBy default all these folders are set to be in your project's root - on the same level as the 'vendor' directory.\nHowever, you can obviously change this however you want. Another thing to take special notice of is that the \nfolder names themselves are defined here and can be changed. This might come in useful if you are integrating Cora\ninto an existing software project that already has its class files located in a specific directory somewhere.\n\n\nFile Naming Conventions\n\n\n/**\n *  Model/Class file prefix. I.e. If your class files are named \"class.MyClass.inc.php\"\n *  then enter 'class.' for Prefix and '.inc' for postfix.\n */\n$config['modelsPrefix'] = 'class.';\n$config['modelsPostfix'] = '';\n\n/**\n *  View file prefix / postfix.\n */\n$config['viewsPrefix'] = 'view.';\n$config['viewsPostfix'] = '';\n\n/**\n *  Controller file prefix / postfix.\n */\n$config['controllersPrefix'] = 'controller.';\n$config['controllersPostfix'] = '';\n\n/**\n *  Library file prefix / postfix.\n */\n$config['librariesPrefix'] = '';\n$config['librariesPostfix'] = '';\n\n\n\n\nHere you can set optional prefix and postfix naming conventions for your files. For instance, if your views\nare named \"view.someView.php\", you tell Cora about that \"view.\" prefix here and then you don't have to worry about the prefix or postfix \nin your controllers. For example: you would be able to load the above view by \n\n\n$this->load->view('someView');",
            "title": "Advanced Configuration"
        },
        {
            "location": "/setup/advanced/#advanced-config-options",
            "text": "",
            "title": "Advanced Config Options"
        },
        {
            "location": "/setup/advanced/#debugging",
            "text": "$config['debug'] = false;\n$config['debugHide'] = false;  These options are for helping you problem solve if the router doesn't seem to be finding your\ncontroller. The \"hide\" option just makes the routing messages show up in the HTML comments.",
            "title": "Debugging"
        },
        {
            "location": "/setup/advanced/#case-sensitivity",
            "text": "$config['lowercase_url'] = true;  By default Cora converts URLs into lowercase so that you can have consistent behavior on case-sensitive servers (e.g. Linux systems) regardless of whether\nor not a user types capital letters into the URL. However, if you wanted your URLs to be case-sensitive, you can disable this option in the config.",
            "title": "Case-Sensitivity"
        },
        {
            "location": "/setup/advanced/#default-controller",
            "text": "$config['default_controller'] = 'Home';  If a user just goes to your homepage 'www.mysite.com`, what controller should this request\nbe routed to? You can set that here.",
            "title": "Default Controller"
        },
        {
            "location": "/setup/advanced/#restful-routing",
            "text": "$config['enable_RESTful'] = true;  We'd recommend against it, but if you want to turn off RESTful routing in Cora, you may do so.\nTo learn more about how routing works within Cora, see  HERE .",
            "title": "RESTful Routing"
        },
        {
            "location": "/setup/advanced/#file-paths",
            "text": "$config['basedir'] = dirname(__FILE__).'/../../../../../';\n\n/**\n *  Path to models/classes directory relative to this file.\n */\n$config['pathToModels'] = $config['basedir'].'classes/';\n\n/**\n *  Path to views directory relative to this file.\n */\n$config['pathToViews'] = $config['basedir'].'views/';\n\n/**\n *  Path to controllers directory relative to this file.\n */\n$config['pathToControllers'] = $config['basedir'].'controllers/';\n\n/**\n *  Path to libraries directory relative to this file.\n */\n$config['pathToLibraries'] = $config['basedir'].'libraries/';\n\n/**\n *  Path to App's Cora directory relative to this file.\n */\n$config['pathToCora'] = $config['basedir'].'cora/';  By default all these folders are set to be in your project's root - on the same level as the 'vendor' directory.\nHowever, you can obviously change this however you want. Another thing to take special notice of is that the \nfolder names themselves are defined here and can be changed. This might come in useful if you are integrating Cora\ninto an existing software project that already has its class files located in a specific directory somewhere.",
            "title": "File Paths"
        },
        {
            "location": "/setup/advanced/#file-naming-conventions",
            "text": "/**\n *  Model/Class file prefix. I.e. If your class files are named \"class.MyClass.inc.php\"\n *  then enter 'class.' for Prefix and '.inc' for postfix.\n */\n$config['modelsPrefix'] = 'class.';\n$config['modelsPostfix'] = '';\n\n/**\n *  View file prefix / postfix.\n */\n$config['viewsPrefix'] = 'view.';\n$config['viewsPostfix'] = '';\n\n/**\n *  Controller file prefix / postfix.\n */\n$config['controllersPrefix'] = 'controller.';\n$config['controllersPostfix'] = '';\n\n/**\n *  Library file prefix / postfix.\n */\n$config['librariesPrefix'] = '';\n$config['librariesPostfix'] = '';  Here you can set optional prefix and postfix naming conventions for your files. For instance, if your views\nare named \"view.someView.php\", you tell Cora about that \"view.\" prefix here and then you don't have to worry about the prefix or postfix \nin your controllers. For example: you would be able to load the above view by   $this->load->view('someView');",
            "title": "File Naming Conventions"
        },
        {
            "location": "/tutorials/intro/",
            "text": "Intro\n\n\nThis page is not written yet! In the meantime, please play around in the demo project and refer to the articles under the \"Documentation\" tab for documentation on specific classes.\n\n\nAnother good resource at this point is to view a presentation I made on Cora which has explanations of how the routing works and displaying data. That presentation can be found here: \nCora Presentation on Google Docs.",
            "title": "Intro to Cora"
        },
        {
            "location": "/tutorials/intro/#intro",
            "text": "This page is not written yet! In the meantime, please play around in the demo project and refer to the articles under the \"Documentation\" tab for documentation on specific classes.  Another good resource at this point is to view a presentation I made on Cora which has explanations of how the routing works and displaying data. That presentation can be found here:  Cora Presentation on Google Docs.",
            "title": "Intro"
        },
        {
            "location": "/tutorials/composer/",
            "text": "Using Composer with Cora\n\n\nTest",
            "title": "Using Composer"
        },
        {
            "location": "/tutorials/composer/#using-composer-with-cora",
            "text": "Test",
            "title": "Using Composer with Cora"
        },
        {
            "location": "/documentation/mvc/overview/",
            "text": "",
            "title": "MVC Pattern"
        },
        {
            "location": "/documentation/routing/overview/",
            "text": "",
            "title": "Routing"
        },
        {
            "location": "/documentation/databaseclass/overview/",
            "text": "Cora's Database class\n\n\nIMPORTANT NOTE: IF YOU ARE GOING TO BE GRABBING CLASS RECORDS FROM A DATABASE, YOU SHOULD BE USING THE \nREPOSITORY CLASS, NOT THIS LOWER LEVEL DATABASE CLASS.\n\n\nThe basic gist of how Cora's Database class works is that it functions as a database-independent medium for storing a desired query.\nWhen you construct an SQL statement using the Database class' query building methods, the resulting query parameters are stored as\nraw data within the Database class (mostly stored in arrays). In order to take that raw data and then execute a query, you have to \nutilize an adaptor that extends the Database class and implements the exec() method. The adaptor is responsible for taking that raw\ndata and translating it into the format required by its associated Database in order to execute the query.\n\n\nIt's important to know that Cora's Repository class is written using the Database class' query methods so that it can work across\na multitude of different database types, and it is the preferred way you should be grabbing class records from a database. If you\nneed a custom query, or want to limit the amount of data you are grabbing, this Database class offers more control by allowing you to\nconstruct your own queries.\n\n\nCurrently Supported Databases\n\n\nCora currently has adaptor classes for:\n\n\n\n\nMySQL (Db_MySQL.php)\n\n\n\n\nIntroduction\n\n\nBelow is a basic example that grabs and echoes the name of all the users in a users table who's type is 'admin'.\n\n\n// Create Database object with adaptor\n$db = new \\Cora\\Db_MySQL();\n\n// Create query\n$db ->select('name')\n    ->from('users')\n    ->where('type', 'admin');\n\n// Execute query and get returned result.\n$query = $db->exec();\n\n// Print all the names\nforeach($query->fetchAll() as $user) {\n    echo $user['name'];\n}\n\n\n\n\nAs you probably see, the basic formula is you create an instance of a database adaptor (Db_MySQL extends Database), construct\nsome query using the Database class' methods, then call the exec() function to execute the query and return any expected result.\nQuery methods can be chained together as you see above too.\n\n\nSecurity\n\n\nThe Database class and its query building methods are extremely powerful, and as such, there are dangerous scenarios of which you need\nto be aware! Column VALUES are sanitized to protect your app from SQL Injection attacks. However, COLUMN name parameters and OPERATOR parameters (=, >, <, IN, etc)\nare NOT sanitized!!! For this reason you should never under any circumstance pass in a value you receive from a user into one of those fields!\nDoing so will leave a huge security hole in your app that an attacker could take advantage of to destroy or compromise everything.\n\n\nBelow is a \nSAFE\n query:\n\n\n// Create and execute query\n$db ->select('name')\n    ->from('users')\n    ->where('name', $_POST['userName']);\n$query = $db->exec();\n\n\n\n\nBelow is an \nEXTREMELY UNSAFE\n query:\n\n\n// Create and execute query\n$db ->select('name')\n    ->from('users')\n    ->where($_POST['column'], $_POST['value']);\n$query = $db->exec();\n\n\n\n\nUtility Methods\n\n\nThe following methods are available when creating any type of query:\n\n\n\n\ngetQuery()\n (returns the compiled query)\n\n\nexec()\n (executes the query that's been constructed and calls Reset)\n\n\nreset()\n (resets the Database class so it's ready for a new query)\n\n\n\n\nSELECT Statements\n\n\nThe methods available when creating a select statement are:\n\n\n\n\nselect()\n\n\ndistinct()\n\n\nfrom()\n\n\njoin()\n\n\nwhere()\n\n\norWhere()\n\n\nin()\n\n\ngroupBy()\n\n\nhaving()\n\n\norHaving()\n\n\norderBy()\n\n\nlimit()\n\n\noffset()\n\n\n\n\nUPDATE Statements\n\n\nThe methods available when creating an update statement are:\n\n\n\n\nupdate()\n\n\nset()\n\n\nwhere()\n\n\n\n\nINSERT Statements\n\n\nThe methods available when creating an insert statement are:\n\n\n\n\ninsert()\n\n\ninto()\n\n\nvalues()\n\n\n\n\nDELETE Statements\n\n\nThe methods available when creating an delete statement are:\n\n\n\n\ndelete()\n\n\nfrom()\n\n\nwhere()\n\n\n\n\nCREATE Statements\n\n\nThe methods available when creating an create statement are:\n\n\n\n\ncreate()\n\n\nfield()\n\n\nprimaryKey()\n\n\nforeignKey()",
            "title": "Database Class"
        },
        {
            "location": "/documentation/databaseclass/overview/#coras-database-class",
            "text": "IMPORTANT NOTE: IF YOU ARE GOING TO BE GRABBING CLASS RECORDS FROM A DATABASE, YOU SHOULD BE USING THE \nREPOSITORY CLASS, NOT THIS LOWER LEVEL DATABASE CLASS.  The basic gist of how Cora's Database class works is that it functions as a database-independent medium for storing a desired query.\nWhen you construct an SQL statement using the Database class' query building methods, the resulting query parameters are stored as\nraw data within the Database class (mostly stored in arrays). In order to take that raw data and then execute a query, you have to \nutilize an adaptor that extends the Database class and implements the exec() method. The adaptor is responsible for taking that raw\ndata and translating it into the format required by its associated Database in order to execute the query.  It's important to know that Cora's Repository class is written using the Database class' query methods so that it can work across\na multitude of different database types, and it is the preferred way you should be grabbing class records from a database. If you\nneed a custom query, or want to limit the amount of data you are grabbing, this Database class offers more control by allowing you to\nconstruct your own queries.",
            "title": "Cora's Database class"
        },
        {
            "location": "/documentation/databaseclass/overview/#currently-supported-databases",
            "text": "Cora currently has adaptor classes for:   MySQL (Db_MySQL.php)",
            "title": "Currently Supported Databases"
        },
        {
            "location": "/documentation/databaseclass/overview/#introduction",
            "text": "Below is a basic example that grabs and echoes the name of all the users in a users table who's type is 'admin'.  // Create Database object with adaptor\n$db = new \\Cora\\Db_MySQL();\n\n// Create query\n$db ->select('name')\n    ->from('users')\n    ->where('type', 'admin');\n\n// Execute query and get returned result.\n$query = $db->exec();\n\n// Print all the names\nforeach($query->fetchAll() as $user) {\n    echo $user['name'];\n}  As you probably see, the basic formula is you create an instance of a database adaptor (Db_MySQL extends Database), construct\nsome query using the Database class' methods, then call the exec() function to execute the query and return any expected result.\nQuery methods can be chained together as you see above too.",
            "title": "Introduction"
        },
        {
            "location": "/documentation/databaseclass/overview/#security",
            "text": "The Database class and its query building methods are extremely powerful, and as such, there are dangerous scenarios of which you need\nto be aware! Column VALUES are sanitized to protect your app from SQL Injection attacks. However, COLUMN name parameters and OPERATOR parameters (=, >, <, IN, etc)\nare NOT sanitized!!! For this reason you should never under any circumstance pass in a value you receive from a user into one of those fields!\nDoing so will leave a huge security hole in your app that an attacker could take advantage of to destroy or compromise everything.  Below is a  SAFE  query:  // Create and execute query\n$db ->select('name')\n    ->from('users')\n    ->where('name', $_POST['userName']);\n$query = $db->exec();  Below is an  EXTREMELY UNSAFE  query:  // Create and execute query\n$db ->select('name')\n    ->from('users')\n    ->where($_POST['column'], $_POST['value']);\n$query = $db->exec();",
            "title": "Security"
        },
        {
            "location": "/documentation/databaseclass/overview/#utility-methods",
            "text": "The following methods are available when creating any type of query:   getQuery()  (returns the compiled query)  exec()  (executes the query that's been constructed and calls Reset)  reset()  (resets the Database class so it's ready for a new query)",
            "title": "Utility Methods"
        },
        {
            "location": "/documentation/databaseclass/overview/#select-statements",
            "text": "The methods available when creating a select statement are:   select()  distinct()  from()  join()  where()  orWhere()  in()  groupBy()  having()  orHaving()  orderBy()  limit()  offset()",
            "title": "SELECT Statements"
        },
        {
            "location": "/documentation/databaseclass/overview/#update-statements",
            "text": "The methods available when creating an update statement are:   update()  set()  where()",
            "title": "UPDATE Statements"
        },
        {
            "location": "/documentation/databaseclass/overview/#insert-statements",
            "text": "The methods available when creating an insert statement are:   insert()  into()  values()",
            "title": "INSERT Statements"
        },
        {
            "location": "/documentation/databaseclass/overview/#delete-statements",
            "text": "The methods available when creating an delete statement are:   delete()  from()  where()",
            "title": "DELETE Statements"
        },
        {
            "location": "/documentation/databaseclass/overview/#create-statements",
            "text": "The methods available when creating an create statement are:   create()  field()  primaryKey()  foreignKey()",
            "title": "CREATE Statements"
        },
        {
            "location": "/documentation/amblend/overview/",
            "text": "",
            "title": "AmBlend ORM"
        },
        {
            "location": "/documentation/amblend/overview/",
            "text": "",
            "title": "Overview"
        },
        {
            "location": "/documentation/amblend/repository/",
            "text": "",
            "title": "Repository"
        },
        {
            "location": "/documentation/amblend/model/",
            "text": "",
            "title": "Model"
        },
        {
            "location": "/documentation/amblend/gateway/",
            "text": "",
            "title": "Gateway"
        },
        {
            "location": "/documentation/amblend/factory/",
            "text": "",
            "title": "Factory"
        },
        {
            "location": "/documentation/databaseclass/overview/",
            "text": "Cora's Database class\n\n\nIMPORTANT NOTE: IF YOU ARE GOING TO BE GRABBING CLASS RECORDS FROM A DATABASE, YOU SHOULD BE USING THE \nREPOSITORY CLASS, NOT THIS LOWER LEVEL DATABASE CLASS.\n\n\nThe basic gist of how Cora's Database class works is that it functions as a database-independent medium for storing a desired query.\nWhen you construct an SQL statement using the Database class' query building methods, the resulting query parameters are stored as\nraw data within the Database class (mostly stored in arrays). In order to take that raw data and then execute a query, you have to \nutilize an adaptor that extends the Database class and implements the exec() method. The adaptor is responsible for taking that raw\ndata and translating it into the format required by its associated Database in order to execute the query.\n\n\nIt's important to know that Cora's Repository class is written using the Database class' query methods so that it can work across\na multitude of different database types, and it is the preferred way you should be grabbing class records from a database. If you\nneed a custom query, or want to limit the amount of data you are grabbing, this Database class offers more control by allowing you to\nconstruct your own queries.\n\n\nCurrently Supported Databases\n\n\nCora currently has adaptor classes for:\n\n\n\n\nMySQL (Db_MySQL.php)\n\n\n\n\nIntroduction\n\n\nBelow is a basic example that grabs and echoes the name of all the users in a users table who's type is 'admin'.\n\n\n// Create Database object with adaptor\n$db = new \\Cora\\Db_MySQL();\n\n// Create query\n$db ->select('name')\n    ->from('users')\n    ->where('type', 'admin');\n\n// Execute query and get returned result.\n$query = $db->exec();\n\n// Print all the names\nforeach($query->fetchAll() as $user) {\n    echo $user['name'];\n}\n\n\n\n\nAs you probably see, the basic formula is you create an instance of a database adaptor (Db_MySQL extends Database), construct\nsome query using the Database class' methods, then call the exec() function to execute the query and return any expected result.\nQuery methods can be chained together as you see above too.\n\n\nSecurity\n\n\nThe Database class and its query building methods are extremely powerful, and as such, there are dangerous scenarios of which you need\nto be aware! Column VALUES are sanitized to protect your app from SQL Injection attacks. However, COLUMN name parameters and OPERATOR parameters (=, >, <, IN, etc)\nare NOT sanitized!!! For this reason you should never under any circumstance pass in a value you receive from a user into one of those fields!\nDoing so will leave a huge security hole in your app that an attacker could take advantage of to destroy or compromise everything.\n\n\nBelow is a \nSAFE\n query:\n\n\n// Create and execute query\n$db ->select('name')\n    ->from('users')\n    ->where('name', $_POST['userName']);\n$query = $db->exec();\n\n\n\n\nBelow is an \nEXTREMELY UNSAFE\n query:\n\n\n// Create and execute query\n$db ->select('name')\n    ->from('users')\n    ->where($_POST['column'], $_POST['value']);\n$query = $db->exec();\n\n\n\n\nUtility Methods\n\n\nThe following methods are available when creating any type of query:\n\n\n\n\ngetQuery()\n (returns the compiled query)\n\n\nexec()\n (executes the query that's been constructed and calls Reset)\n\n\nreset()\n (resets the Database class so it's ready for a new query)\n\n\n\n\nSELECT Statements\n\n\nThe methods available when creating a select statement are:\n\n\n\n\nselect()\n\n\ndistinct()\n\n\nfrom()\n\n\njoin()\n\n\nwhere()\n\n\norWhere()\n\n\nin()\n\n\ngroupBy()\n\n\nhaving()\n\n\norHaving()\n\n\norderBy()\n\n\nlimit()\n\n\noffset()\n\n\n\n\nUPDATE Statements\n\n\nThe methods available when creating an update statement are:\n\n\n\n\nupdate()\n\n\nset()\n\n\nwhere()\n\n\n\n\nINSERT Statements\n\n\nThe methods available when creating an insert statement are:\n\n\n\n\ninsert()\n\n\ninto()\n\n\nvalues()\n\n\n\n\nDELETE Statements\n\n\nThe methods available when creating an delete statement are:\n\n\n\n\ndelete()\n\n\nfrom()\n\n\nwhere()\n\n\n\n\nCREATE Statements\n\n\nThe methods available when creating an create statement are:\n\n\n\n\ncreate()\n\n\nfield()\n\n\nprimaryKey()\n\n\nforeignKey()",
            "title": "Overview"
        },
        {
            "location": "/documentation/databaseclass/overview/#coras-database-class",
            "text": "IMPORTANT NOTE: IF YOU ARE GOING TO BE GRABBING CLASS RECORDS FROM A DATABASE, YOU SHOULD BE USING THE \nREPOSITORY CLASS, NOT THIS LOWER LEVEL DATABASE CLASS.  The basic gist of how Cora's Database class works is that it functions as a database-independent medium for storing a desired query.\nWhen you construct an SQL statement using the Database class' query building methods, the resulting query parameters are stored as\nraw data within the Database class (mostly stored in arrays). In order to take that raw data and then execute a query, you have to \nutilize an adaptor that extends the Database class and implements the exec() method. The adaptor is responsible for taking that raw\ndata and translating it into the format required by its associated Database in order to execute the query.  It's important to know that Cora's Repository class is written using the Database class' query methods so that it can work across\na multitude of different database types, and it is the preferred way you should be grabbing class records from a database. If you\nneed a custom query, or want to limit the amount of data you are grabbing, this Database class offers more control by allowing you to\nconstruct your own queries.",
            "title": "Cora's Database class"
        },
        {
            "location": "/documentation/databaseclass/overview/#currently-supported-databases",
            "text": "Cora currently has adaptor classes for:   MySQL (Db_MySQL.php)",
            "title": "Currently Supported Databases"
        },
        {
            "location": "/documentation/databaseclass/overview/#introduction",
            "text": "Below is a basic example that grabs and echoes the name of all the users in a users table who's type is 'admin'.  // Create Database object with adaptor\n$db = new \\Cora\\Db_MySQL();\n\n// Create query\n$db ->select('name')\n    ->from('users')\n    ->where('type', 'admin');\n\n// Execute query and get returned result.\n$query = $db->exec();\n\n// Print all the names\nforeach($query->fetchAll() as $user) {\n    echo $user['name'];\n}  As you probably see, the basic formula is you create an instance of a database adaptor (Db_MySQL extends Database), construct\nsome query using the Database class' methods, then call the exec() function to execute the query and return any expected result.\nQuery methods can be chained together as you see above too.",
            "title": "Introduction"
        },
        {
            "location": "/documentation/databaseclass/overview/#security",
            "text": "The Database class and its query building methods are extremely powerful, and as such, there are dangerous scenarios of which you need\nto be aware! Column VALUES are sanitized to protect your app from SQL Injection attacks. However, COLUMN name parameters and OPERATOR parameters (=, >, <, IN, etc)\nare NOT sanitized!!! For this reason you should never under any circumstance pass in a value you receive from a user into one of those fields!\nDoing so will leave a huge security hole in your app that an attacker could take advantage of to destroy or compromise everything.  Below is a  SAFE  query:  // Create and execute query\n$db ->select('name')\n    ->from('users')\n    ->where('name', $_POST['userName']);\n$query = $db->exec();  Below is an  EXTREMELY UNSAFE  query:  // Create and execute query\n$db ->select('name')\n    ->from('users')\n    ->where($_POST['column'], $_POST['value']);\n$query = $db->exec();",
            "title": "Security"
        },
        {
            "location": "/documentation/databaseclass/overview/#utility-methods",
            "text": "The following methods are available when creating any type of query:   getQuery()  (returns the compiled query)  exec()  (executes the query that's been constructed and calls Reset)  reset()  (resets the Database class so it's ready for a new query)",
            "title": "Utility Methods"
        },
        {
            "location": "/documentation/databaseclass/overview/#select-statements",
            "text": "The methods available when creating a select statement are:   select()  distinct()  from()  join()  where()  orWhere()  in()  groupBy()  having()  orHaving()  orderBy()  limit()  offset()",
            "title": "SELECT Statements"
        },
        {
            "location": "/documentation/databaseclass/overview/#update-statements",
            "text": "The methods available when creating an update statement are:   update()  set()  where()",
            "title": "UPDATE Statements"
        },
        {
            "location": "/documentation/databaseclass/overview/#insert-statements",
            "text": "The methods available when creating an insert statement are:   insert()  into()  values()",
            "title": "INSERT Statements"
        },
        {
            "location": "/documentation/databaseclass/overview/#delete-statements",
            "text": "The methods available when creating an delete statement are:   delete()  from()  where()",
            "title": "DELETE Statements"
        },
        {
            "location": "/documentation/databaseclass/overview/#create-statements",
            "text": "The methods available when creating an create statement are:   create()  field()  primaryKey()  foreignKey()",
            "title": "CREATE Statements"
        },
        {
            "location": "/documentation/databaseclass/methods_utility/",
            "text": "Utility Database Class Methods\n\n\ntable() method\n\n\nThe method for selecting a table you want to perform an operation on (whether selecting, updating, inserting, or deleting)\nis to use table(). However, in order to let developers construct queries in the same format they are used to when writing\nraw SQL, there are several aliases to this method.\n\n\nPurpose:\n \n\nThe table() method is for selecting the table(s) you want to perform an action on.\n\n\nFormat:\n  \n\n\ntable(table_name | array(table_name1, table_name2, ...))\n\n\n\n\nUsage and Aliases:\n \n\nAnywhere you would use a from(), into(), or update() method you can use this method instead.\n\n\nExamples:\n   \n\n\n// A SELECT query\n$db ->table('users')\n    ->select('*')\n    ->join('members', [['users.user_id', '=', 'members.user_id']])\n    ->orderBy('users.user_id', 'ASC')\n    ->exec();\n\n// An UPDATE query\n$db ->table('users')\n    ->set('name', 'John')\n    ->where('name', 'Randy', '>')\n    ->getQuery();        \n\n// An INSERT query\n$db ->table('users')\n    ->insert('name, email, type')\n    ->values([['bob', 'bob@gmail.com', 'admin'], ['john', 'john@gmail.com', 'admin']])\n    ->values(['bob', 'bob@gmail.com', 'admin'])\n    ->exec();\n\n\n\n\ngetQuery() method\n\n\nPurpose:\n \n\nThe getQuery() method returns the query that will be executed on the database. This is useful when trying\nto troubleshoot if you want to see what Cora's Database class is actually executing.\n\nFormat:\n  \n\n\ngetQuery()\n\n\n\n\nExamples:\n  \n\n\n// Constuct a CREATE table query, then echo it out (does not execute it)\necho $db->create('locations')\n        ->field('id', 'int', 'NOT NULL AUTO_INCREMENT')\n        ->field('name', 'varchar(255)')\n        ->field('address', 'varchar(255)')\n        ->field('user_id', 'int')\n        ->primaryKey('id')\n        ->foreignKey('user_id', 'users', 'id')\n        ->getQuery();\n\n\n\n\nexec() method\n\n\nPurpose:\n \n\nThe exec() method executes a query, resets the database class by calling reset(), and returns any data if there's\ndata to return.\n\n\nFormat:\n  \n\n\nexec()\n\n\n\n\nExamples:\n  \n\n\n// Constuct a CREATE table query, then execute it.\n$db ->create('locations')\n    ->field('id', 'int', 'NOT NULL AUTO_INCREMENT')\n    ->field('name', 'varchar(255)')\n    ->field('address', 'varchar(255)')\n    ->field('user_id', 'int')\n    ->primaryKey('id')\n    ->foreignKey('user_id', 'users', 'id')\n    ->exec();\n\n\n\n\nreset() method\n\n\nPurpose:\n \n\nThe reset() method clears out the stored data in the database class so that a new query can then be constructed.\n\nFormat:\n  \n\n\nreset()\n\n\n\n\nExamples:\n  \n\n\n// Constuct a CREATE table query, then echo it out (does not execute it)\necho $db->create('locations')\n        ->field('id', 'int', 'NOT NULL AUTO_INCREMENT')\n        ->field('name', 'varchar(255)')\n        ->field('address', 'varchar(255)')\n        ->field('user_id', 'int')\n        ->primaryKey('id')\n        ->foreignKey('user_id', 'users', 'id')\n        ->getQuery();\n\n/* \n    Before we can start working on a 2nd query, we either need to execute the one we just constructed\n    (which clears out the stored data), OR we need to manually clear out the data if we don't plan\n    on executing the query.\n*/\n// Clear out the stored data from the first query we constructed.\n$db->reset()\n\n// Start constructing a 2nd query...\necho $db->select('*')\n        ->from('users')\n        ->join('members', [['users.user_id', '=', 'members.user_id']])\n        ->orderBy('users.user_id', 'ASC')\n        ->getQuery();",
            "title": "Utility Methods"
        },
        {
            "location": "/documentation/databaseclass/methods_utility/#utility-database-class-methods",
            "text": "",
            "title": "Utility Database Class Methods"
        },
        {
            "location": "/documentation/databaseclass/methods_utility/#table-method",
            "text": "The method for selecting a table you want to perform an operation on (whether selecting, updating, inserting, or deleting)\nis to use table(). However, in order to let developers construct queries in the same format they are used to when writing\nraw SQL, there are several aliases to this method.  Purpose:   \nThe table() method is for selecting the table(s) you want to perform an action on.  Format:     table(table_name | array(table_name1, table_name2, ...))  Usage and Aliases:   \nAnywhere you would use a from(), into(), or update() method you can use this method instead.  Examples:      // A SELECT query\n$db ->table('users')\n    ->select('*')\n    ->join('members', [['users.user_id', '=', 'members.user_id']])\n    ->orderBy('users.user_id', 'ASC')\n    ->exec();\n\n// An UPDATE query\n$db ->table('users')\n    ->set('name', 'John')\n    ->where('name', 'Randy', '>')\n    ->getQuery();        \n\n// An INSERT query\n$db ->table('users')\n    ->insert('name, email, type')\n    ->values([['bob', 'bob@gmail.com', 'admin'], ['john', 'john@gmail.com', 'admin']])\n    ->values(['bob', 'bob@gmail.com', 'admin'])\n    ->exec();",
            "title": "table() method"
        },
        {
            "location": "/documentation/databaseclass/methods_utility/#getquery-method",
            "text": "Purpose:   \nThe getQuery() method returns the query that will be executed on the database. This is useful when trying\nto troubleshoot if you want to see what Cora's Database class is actually executing. Format:     getQuery()  Examples:     // Constuct a CREATE table query, then echo it out (does not execute it)\necho $db->create('locations')\n        ->field('id', 'int', 'NOT NULL AUTO_INCREMENT')\n        ->field('name', 'varchar(255)')\n        ->field('address', 'varchar(255)')\n        ->field('user_id', 'int')\n        ->primaryKey('id')\n        ->foreignKey('user_id', 'users', 'id')\n        ->getQuery();",
            "title": "getQuery() method"
        },
        {
            "location": "/documentation/databaseclass/methods_utility/#exec-method",
            "text": "Purpose:   \nThe exec() method executes a query, resets the database class by calling reset(), and returns any data if there's\ndata to return.  Format:     exec()  Examples:     // Constuct a CREATE table query, then execute it.\n$db ->create('locations')\n    ->field('id', 'int', 'NOT NULL AUTO_INCREMENT')\n    ->field('name', 'varchar(255)')\n    ->field('address', 'varchar(255)')\n    ->field('user_id', 'int')\n    ->primaryKey('id')\n    ->foreignKey('user_id', 'users', 'id')\n    ->exec();",
            "title": "exec() method"
        },
        {
            "location": "/documentation/databaseclass/methods_utility/#reset-method",
            "text": "Purpose:   \nThe reset() method clears out the stored data in the database class so that a new query can then be constructed. Format:     reset()  Examples:     // Constuct a CREATE table query, then echo it out (does not execute it)\necho $db->create('locations')\n        ->field('id', 'int', 'NOT NULL AUTO_INCREMENT')\n        ->field('name', 'varchar(255)')\n        ->field('address', 'varchar(255)')\n        ->field('user_id', 'int')\n        ->primaryKey('id')\n        ->foreignKey('user_id', 'users', 'id')\n        ->getQuery();\n\n/* \n    Before we can start working on a 2nd query, we either need to execute the one we just constructed\n    (which clears out the stored data), OR we need to manually clear out the data if we don't plan\n    on executing the query.\n*/\n// Clear out the stored data from the first query we constructed.\n$db->reset()\n\n// Start constructing a 2nd query...\necho $db->select('*')\n        ->from('users')\n        ->join('members', [['users.user_id', '=', 'members.user_id']])\n        ->orderBy('users.user_id', 'ASC')\n        ->getQuery();",
            "title": "reset() method"
        },
        {
            "location": "/documentation/databaseclass/methods_select/",
            "text": "Database Class Methods\n\n\nselect() method\n\n\nPurpose:\n \n\nThe select() method is for choosing the columns you want to return in your query.\n\n\nFormat:\n \n\n\nselect(column_name | array(column_name1, column_name2, ...))\n\n\n\n\nExamples:\n  \n\n\n// Grab a single column\n$db->select('id')\n\n// OR grab multiple columns\n$db->select('id')\n   ->select('first_name')\n\n// OR grab multiple columns by passing in an array\n$db->select(['id', 'first_name', 'last_name'])\n\n\n\n\ndistinct() method\n\n\nPurpose:\n \n\nThe distinct() method is for limiting the results returned so that there's no duplicates.\n\n\nFormat:\n  \n\n\ndistinct()\n\n\n\n\nExamples:\n  \n\n\n// The distinct method takes no parameters, you just call it when constructing your query.\n$db ->select('first_name')\n    ->distinct()\n    ->from('users');\n\n\n\n\nfrom() method\n\n\nAlias:\n \n\nThis method is an alias of table().\n\n\nPurpose:\n \n\nThe from() method is for selecting the table(s) you want to return or delete data from.\n\n\nFormat:\n  \n\n\nfrom(table_name | array(table_name1, table_name2, ...))\n\n\n\n\nExamples:\n   \n\n\n// Grab a single table\n$db->from('users')\n\n// OR join multiple tables\n$db->from('users')\n   ->from('user_profiles')\n\n// OR grab multiple tables by passing in an array\n$db->from(['users', 'user_profiles'])\n\n\n\n\njoin() method\n\n\nPurpose:\n \n\nThe join() method is for joining multiple tables together.\n\n\nFormat:\n  \n\n\n// f_table = Foreign Table Name\n// f_column = Foreign Column Name\njoin(f_table, array(array(table.column, operator, f_table.f_column)[, ...]) [, join_type ])\n\n\n\n\nExamples:\n  \n\n\n// Join a table when a certain single condition is met, using the default INNER join\n$db->join('members', [['users.user_id', '=', 'members.user_id']])\n\n// Join a table using a specifc type of join\n$db->join('members', [['users.user_id', '=', 'members.user_id']], 'OUTER')\n\n// Join a table when multiple conditions are met\n$db->join('members', [\n            ['Orders.customerID', '=', 'Customers.customerID'],\n            ['User.type', '=', 'Customer.type']\n        ], 'OUTER')\n\n// Apply multiple joins together\n$db ->join('members', [['users.user_id', '=', 'members.user_id']])\n    ->join('locations', [['users.location_id', '=', 'locations.id']])\n\n\n\n\nwhere() method\n\n\nPurpose:\n \n\nThe where() method is for limiting the records that get returned to only those that pass certain conditions.\n\n\nFormat:\n \n\n\nwhere(column_name, value [, operator] | array(array(column_name, operator, value [, conjunction])))\n\n\n\n\nExamples:\n  \n\n\n// Only return results where name = 'bob'\n$db->where('name', 'bob')\n\n// Only return results where the date is greater than or equal to january first 2014\n$db->where('date', '2014-01-01', '>=')\n\n// If the above format of passing in the operator as an optional 3rd parameter bothers you,\n// you can use the array format which uses the [column, operator, value] ordering.\n// Note that you need the double brackets though because it supports multiple statements.\n$db->where([['date', '>=', '2014-01-01']])\n\n// Only return results where the date is greater than or equal to january first 2014\n// and less than january 2016\n$db ->where('date', '2014-01-01', '>=')\n    ->where('date', '2016-01-01', '<')\n\n// Only return results where name = 'bob' OR name = 'jeff'\n$db ->where('name', 'bob')\n    ->orWhere('name', 'jeff')\n\n// Pass in an array...\n// Only return results where a user's name starts with 's' or was created after Jan 2016,\n// and the user is of type 'admin' or 'moderator'\n$db ->where([\n        ['created_time', '>=', '2016-01-01', 'OR'],\n        ['name', 'LIKE', 's%']\n    ])\n    ->where([\n        ['type', '=', 'admin', 'OR'],\n        ['type', '=', 'moderator']\n    ])  \n// Using the MySQL adaptor, the above produces:\n// WHERE (created_time >= '2016-01-01' OR name LIKE 's%') AND (type = 'admin' OR type = 'moderator')\n\n\n\n\norWhere() method\n\n\nPurpose:\n \n\nThe orWhere() method is for limiting the records that get returned to only those that pass certain conditions. \n\n\nSimilar To:\n \n\nIt works identically to the where() method except any conditions passed to it will be conjoined with 'OR' to any other Where declarations. See the where() section for more examples.\n\n\nExamples:\n  \n\n\n// Only return users who are named bob and also admins, or users named jeff\n$db ->where([\n        ['name', 'bob'],\n        ['type', 'admin']\n    ])\n    ->orWhere('name', 'jeff')\n// Using the MySQL adaptor, the above produces:\n// WHERE (name = 'bob' AND type = 'admin') OR (name = 'jeff')\n\n\n\n\nin() method\n\n\nPurpose:\n \n\nThe in() method is for checking if a column's value exists in another set of data.\n\n\nFormat:\n   \n\n\nin(column, value | string(value1, value2, value3, ...) | array(value1, value2, value3, ...))\n\n\n\n\nExamples:\n \n\n\n// Check if column value matches a single value (same as using where statement)\n$db ->in('name', 'bob')\n\n// Check if column value is present in a comma separated list\n// Note: The list gets translated into an array by the Database class.\n$db ->in('name', 'bob, jeff, susan')\n\n// Check if column value is present in an array of values\n$db ->in('name', ['bob', 'jeff', 'susan'])\n\n// NOT RECOMMENDED as it breaks cross-database functionality, but possible\n$db ->in('name', 'SELECT name FROM users WHERE name LIKE s%')\n// The better way of doing the above is to do a query to grab all the names that start with 's',\n// then pass the result set as an array to the in() method. This would preserve cross-database\n// functionality and not lock you into databases that support your SQL statement.\n\n\n\n\ngroupBy() method\n\n\nPurpose:\n \n\nThe groupBy() method is for combining data together.\n\n\nFormat:\n  \n\n\ngroupBy(column | array(column1, column2, ...))\n\n\n\n\nExamples:\n   \n\n\n// Group by a single column\n$db->groupBy('last_name')\n\n// OR group by multiple columns\n$db->groupBy('last_name')\n   ->groupBy('location')\n\n// OR group by multiple columns by passing in an array\n$db->groupBy(['last_name', 'location'])\n\n\n\n\nhaving() method\n\n\nPurpose:\n \n\nThe having() method is for further filtering the results returned. where() performs row level checks,\nhaving() performs checks on the result set that gets returned after row level conditions are satisfied.\nIt's for filtering based on aggregates which where() can't do.\n\n\nFormat:\n \n\n\nhaving(column_name, value [, operator] | array(array(column_name, operator, value [, conjunction])))\n\n\n\n\nExamples:\n \n\nhaving() follows the same format as where(), so feel free to look at the examples there if you need to.\nIn order to understand more about the SQL Having keyword, \nsee this example from w3schools.com\n\n\norHaving() method\n\n\nPurpose:\n \n\nJoins the given condition(s) with any previous condition statements joined by 'OR'.\n\n\nFollows the same format as having(). For examples see the syntactially identical orWhere() method.\n\n\norderBy() method\n\n\nPurpose:\n \n\nThe orderBy() method is for ordering the returned results from your query.\n\n\nFormat:\n \n\n\n// sort_direction = DESC (descending) | ASC (ascending)\norderBy(column_name, sort_direction)\n\n\n\n\nExamples:\n \n\n\n// Specifying a single column to order by...\n$db ->orderBy('name', 'ASC')\n\n// Specifying multiple columns to order by...\n$db ->orderBy('users.name', 'DESC')\n    ->orderBy('locations.name', 'DESC')\n\n\n\n\nlimit() method\n\n\nPurpose:\n \n\nThe limit() method is for limiting the number of returned results from a query.\n\n\nFormat:\n   \n\n\nlimit(number)\n\n\n\n\nExamples:\n   \n\n\n// Limit the number of result rows to 10\n$db ->limit(10)\n\n\n\n\noffset() method\n\n\nPurpose:\n \n\nThe offset() method is for specifying how many result rows should be skipped when returning a query.\nIt's most commonly used in conjunction with limit() to perform pagination.\n\n\nFormat:\n   \n\n\noffset(number)\n\n\n\n\nExamples:\n   \n\n\n// Skip returning the first 10 results from a query's result set.\n$db ->offset(10)\n\n// Return results 11-20 from a large result set\n$db ->limit(10)\n    ->offset(10)\n\n// Return results 21-30 from a large result set\n$db ->limit(10)\n    ->offset(20)",
            "title": "SELECT Methods"
        },
        {
            "location": "/documentation/databaseclass/methods_select/#database-class-methods",
            "text": "",
            "title": "Database Class Methods"
        },
        {
            "location": "/documentation/databaseclass/methods_select/#select-method",
            "text": "Purpose:   \nThe select() method is for choosing the columns you want to return in your query.  Format:    select(column_name | array(column_name1, column_name2, ...))  Examples:     // Grab a single column\n$db->select('id')\n\n// OR grab multiple columns\n$db->select('id')\n   ->select('first_name')\n\n// OR grab multiple columns by passing in an array\n$db->select(['id', 'first_name', 'last_name'])",
            "title": "select() method"
        },
        {
            "location": "/documentation/databaseclass/methods_select/#distinct-method",
            "text": "Purpose:   \nThe distinct() method is for limiting the results returned so that there's no duplicates.  Format:     distinct()  Examples:     // The distinct method takes no parameters, you just call it when constructing your query.\n$db ->select('first_name')\n    ->distinct()\n    ->from('users');",
            "title": "distinct() method"
        },
        {
            "location": "/documentation/databaseclass/methods_select/#from-method",
            "text": "Alias:   \nThis method is an alias of table().  Purpose:   \nThe from() method is for selecting the table(s) you want to return or delete data from.  Format:     from(table_name | array(table_name1, table_name2, ...))  Examples:      // Grab a single table\n$db->from('users')\n\n// OR join multiple tables\n$db->from('users')\n   ->from('user_profiles')\n\n// OR grab multiple tables by passing in an array\n$db->from(['users', 'user_profiles'])",
            "title": "from() method"
        },
        {
            "location": "/documentation/databaseclass/methods_select/#join-method",
            "text": "Purpose:   \nThe join() method is for joining multiple tables together.  Format:     // f_table = Foreign Table Name\n// f_column = Foreign Column Name\njoin(f_table, array(array(table.column, operator, f_table.f_column)[, ...]) [, join_type ])  Examples:     // Join a table when a certain single condition is met, using the default INNER join\n$db->join('members', [['users.user_id', '=', 'members.user_id']])\n\n// Join a table using a specifc type of join\n$db->join('members', [['users.user_id', '=', 'members.user_id']], 'OUTER')\n\n// Join a table when multiple conditions are met\n$db->join('members', [\n            ['Orders.customerID', '=', 'Customers.customerID'],\n            ['User.type', '=', 'Customer.type']\n        ], 'OUTER')\n\n// Apply multiple joins together\n$db ->join('members', [['users.user_id', '=', 'members.user_id']])\n    ->join('locations', [['users.location_id', '=', 'locations.id']])",
            "title": "join() method"
        },
        {
            "location": "/documentation/databaseclass/methods_select/#where-method",
            "text": "Purpose:   \nThe where() method is for limiting the records that get returned to only those that pass certain conditions.  Format:    where(column_name, value [, operator] | array(array(column_name, operator, value [, conjunction])))  Examples:     // Only return results where name = 'bob'\n$db->where('name', 'bob')\n\n// Only return results where the date is greater than or equal to january first 2014\n$db->where('date', '2014-01-01', '>=')\n\n// If the above format of passing in the operator as an optional 3rd parameter bothers you,\n// you can use the array format which uses the [column, operator, value] ordering.\n// Note that you need the double brackets though because it supports multiple statements.\n$db->where([['date', '>=', '2014-01-01']])\n\n// Only return results where the date is greater than or equal to january first 2014\n// and less than january 2016\n$db ->where('date', '2014-01-01', '>=')\n    ->where('date', '2016-01-01', '<')\n\n// Only return results where name = 'bob' OR name = 'jeff'\n$db ->where('name', 'bob')\n    ->orWhere('name', 'jeff')\n\n// Pass in an array...\n// Only return results where a user's name starts with 's' or was created after Jan 2016,\n// and the user is of type 'admin' or 'moderator'\n$db ->where([\n        ['created_time', '>=', '2016-01-01', 'OR'],\n        ['name', 'LIKE', 's%']\n    ])\n    ->where([\n        ['type', '=', 'admin', 'OR'],\n        ['type', '=', 'moderator']\n    ])  \n// Using the MySQL adaptor, the above produces:\n// WHERE (created_time >= '2016-01-01' OR name LIKE 's%') AND (type = 'admin' OR type = 'moderator')",
            "title": "where() method"
        },
        {
            "location": "/documentation/databaseclass/methods_select/#orwhere-method",
            "text": "Purpose:   \nThe orWhere() method is for limiting the records that get returned to only those that pass certain conditions.   Similar To:   \nIt works identically to the where() method except any conditions passed to it will be conjoined with 'OR' to any other Where declarations. See the where() section for more examples.  Examples:     // Only return users who are named bob and also admins, or users named jeff\n$db ->where([\n        ['name', 'bob'],\n        ['type', 'admin']\n    ])\n    ->orWhere('name', 'jeff')\n// Using the MySQL adaptor, the above produces:\n// WHERE (name = 'bob' AND type = 'admin') OR (name = 'jeff')",
            "title": "orWhere() method"
        },
        {
            "location": "/documentation/databaseclass/methods_select/#in-method",
            "text": "Purpose:   \nThe in() method is for checking if a column's value exists in another set of data.  Format:      in(column, value | string(value1, value2, value3, ...) | array(value1, value2, value3, ...))  Examples:    // Check if column value matches a single value (same as using where statement)\n$db ->in('name', 'bob')\n\n// Check if column value is present in a comma separated list\n// Note: The list gets translated into an array by the Database class.\n$db ->in('name', 'bob, jeff, susan')\n\n// Check if column value is present in an array of values\n$db ->in('name', ['bob', 'jeff', 'susan'])\n\n// NOT RECOMMENDED as it breaks cross-database functionality, but possible\n$db ->in('name', 'SELECT name FROM users WHERE name LIKE s%')\n// The better way of doing the above is to do a query to grab all the names that start with 's',\n// then pass the result set as an array to the in() method. This would preserve cross-database\n// functionality and not lock you into databases that support your SQL statement.",
            "title": "in() method"
        },
        {
            "location": "/documentation/databaseclass/methods_select/#groupby-method",
            "text": "Purpose:   \nThe groupBy() method is for combining data together.  Format:     groupBy(column | array(column1, column2, ...))  Examples:      // Group by a single column\n$db->groupBy('last_name')\n\n// OR group by multiple columns\n$db->groupBy('last_name')\n   ->groupBy('location')\n\n// OR group by multiple columns by passing in an array\n$db->groupBy(['last_name', 'location'])",
            "title": "groupBy() method"
        },
        {
            "location": "/documentation/databaseclass/methods_select/#having-method",
            "text": "Purpose:   \nThe having() method is for further filtering the results returned. where() performs row level checks,\nhaving() performs checks on the result set that gets returned after row level conditions are satisfied.\nIt's for filtering based on aggregates which where() can't do.  Format:    having(column_name, value [, operator] | array(array(column_name, operator, value [, conjunction])))  Examples:   \nhaving() follows the same format as where(), so feel free to look at the examples there if you need to.\nIn order to understand more about the SQL Having keyword,  see this example from w3schools.com",
            "title": "having() method"
        },
        {
            "location": "/documentation/databaseclass/methods_select/#orhaving-method",
            "text": "Purpose:   \nJoins the given condition(s) with any previous condition statements joined by 'OR'.  Follows the same format as having(). For examples see the syntactially identical orWhere() method.",
            "title": "orHaving() method"
        },
        {
            "location": "/documentation/databaseclass/methods_select/#orderby-method",
            "text": "Purpose:   \nThe orderBy() method is for ordering the returned results from your query.  Format:    // sort_direction = DESC (descending) | ASC (ascending)\norderBy(column_name, sort_direction)  Examples:    // Specifying a single column to order by...\n$db ->orderBy('name', 'ASC')\n\n// Specifying multiple columns to order by...\n$db ->orderBy('users.name', 'DESC')\n    ->orderBy('locations.name', 'DESC')",
            "title": "orderBy() method"
        },
        {
            "location": "/documentation/databaseclass/methods_select/#limit-method",
            "text": "Purpose:   \nThe limit() method is for limiting the number of returned results from a query.  Format:      limit(number)  Examples:      // Limit the number of result rows to 10\n$db ->limit(10)",
            "title": "limit() method"
        },
        {
            "location": "/documentation/databaseclass/methods_select/#offset-method",
            "text": "Purpose:   \nThe offset() method is for specifying how many result rows should be skipped when returning a query.\nIt's most commonly used in conjunction with limit() to perform pagination.  Format:      offset(number)  Examples:      // Skip returning the first 10 results from a query's result set.\n$db ->offset(10)\n\n// Return results 11-20 from a large result set\n$db ->limit(10)\n    ->offset(10)\n\n// Return results 21-30 from a large result set\n$db ->limit(10)\n    ->offset(20)",
            "title": "offset() method"
        },
        {
            "location": "/documentation/databaseclass/methods_update/",
            "text": "Database Class Methods\n\n\nupdate() method\n\n\nAlias:\n \n\nThis method is an alias of table().\n\n\nPurpose:\n \n\nThe update() method is for selecting the table(s) you want to perform an update on.\n\n\nFormat:\n  \n\n\nupdate(table_name | array(table_name1, table_name2, ...))\n\n\n\n\nset() method\n\n\nPurpose:\n \n\nThe set() method is for assigning a field a new value.\n\n\nFormat:\n   \n\n\nset(column_name, newValue)\n\n\n\n\nExamples:\n  \n\n\n// Rename any users with the name Randy to John.\n$db ->update('users')\n    ->set('name', 'John')\n    ->where('name', 'Randy')\n    ->exec();\n\n\n\n\nwhere() method\n\n\nPurpose:\n \n\nThe where() method is for limiting the records that get returned to only those that pass certain conditions.\n\n\nFormat:\n \n\n\nwhere(column_name, value [, operator] | array(array(column_name, operator, value [, conjunction])))\n\n\n\n\nExamples:\n  \n\n\n// Only return results where name = 'bob'\n$db->where('name', 'bob')\n\n// Only return results where the date is greater than or equal to january first 2014\n$db->where('date', '2014-01-01', '>=')\n\n// Only return results where the date is greater than or equal to january first 2014\n// and less than january 2016\n$db ->where('date', '2014-01-01', '>=')\n    ->where('date', '2016-01-01', '<')\n\n// Only return results where name = 'bob' OR name = 'jeff'\n$db ->where('name', 'bob')\n    ->orWhere('name', 'jeff')\n\n// Pass in an array...\n// Only return results where a user's name starts with 's' or was created after Jan 2016,\n// and the user is of type 'admin' or 'moderator'\n$db ->where([\n        ['created_time', '>=', '2016-01-01', 'OR'],\n        ['name', 'LIKE', 's%']\n    ])\n    ->where([\n        ['type', '=', 'admin', 'OR'],\n        ['type', '=', 'moderator']\n    ])  \n// Using the MySQL adaptor, the above produces:\n// WHERE (created_time >= '2016-01-01' OR name LIKE 's%') AND (type = 'admin' OR type = 'moderator')\n\n\n\n\norWhere() method\n\n\nPurpose:\n \n\nThe orWhere() method is for limiting the records that get returned to only those that pass certain conditions. \n\n\nSimilar To:\n \n\nIt works identically to the where() method except any conditions passed to it will be conjoined with 'OR' to any other Where declarations. See the where() section for more examples.\n\n\nExamples:\n  \n\n\n// Only return users who are named bob and also admins, or users named jeff\n$db ->where([\n        ['name', 'bob'],\n        ['type', 'admin']\n    ])\n    ->orWhere('name', 'jeff')\n// Using the MySQL adaptor, the above produces:\n// WHERE (name = 'bob' AND type = 'admin') OR (name = 'jeff')\n\n\n\n\nin() method\n\n\nPurpose:\n \n\nThe in() method is for checking if a column's value exists in another set of data.\n\n\nFormat:\n   \n\n\nin(column, value | string(value1, value2, value3, ...) | array(value1, value2, value3, ...))\n\n\n\n\nExamples:\n \n\n\n// Check if column value matches a single value (same as using where statement)\n$db ->in('name', 'bob')\n\n// Check if column value is present in a comma separated list\n// Note: The list gets translated into an array by the Database class.\n$db ->in('name', 'bob, jeff, susan')\n\n// Check if column value is present in an array of values\n$db ->in('name', ['bob', 'jeff', 'susan'])\n\n// NOT RECOMMENDED as it breaks cross-database functionality, but possible\n$db ->in('name', 'SELECT name FROM users WHERE name LIKE s%')\n// The better way of doing the above is to do a query to grab all the names that start with 's',\n// then pass the result set as an array to the in() method. This would preserve cross-database\n// functionality and not lock you into databases that support your SQL statement.\n\n\n\n\nformat as having(). For examples see the syntactially identical orWhere() method.\n\n\norderBy() method\n\n\nPurpose:\n \n\nThe orderBy() method is for ordering the returned results from your query.\n\n\nFormat:\n \n\n\n// sort_direction = DESC (descending) | ASC (ascending)\norderBy(column_name, sort_direction)\n\n\n\n\nExamples:\n \n\n\n// Specifying a single column to order by...\n$db ->orderBy('name', 'ASC')\n\n// Specifying multiple columns to order by...\n$db ->orderBy('users.name', 'DESC')\n    ->orderBy('locations.name', 'DESC')\n\n\n\n\nlimit() method\n\n\nPurpose:\n \n\nThe limit() method is for limiting the number of returned results from a query.\n\n\nFormat:\n   \n\n\nlimit(number)\n\n\n\n\nExamples:\n   \n\n\n// Limit the number of result rows to 10\n$db ->limit(10)",
            "title": "UPDATE Methods"
        },
        {
            "location": "/documentation/databaseclass/methods_update/#database-class-methods",
            "text": "",
            "title": "Database Class Methods"
        },
        {
            "location": "/documentation/databaseclass/methods_update/#update-method",
            "text": "Alias:   \nThis method is an alias of table().  Purpose:   \nThe update() method is for selecting the table(s) you want to perform an update on.  Format:     update(table_name | array(table_name1, table_name2, ...))",
            "title": "update() method"
        },
        {
            "location": "/documentation/databaseclass/methods_update/#set-method",
            "text": "Purpose:   \nThe set() method is for assigning a field a new value.  Format:      set(column_name, newValue)  Examples:     // Rename any users with the name Randy to John.\n$db ->update('users')\n    ->set('name', 'John')\n    ->where('name', 'Randy')\n    ->exec();",
            "title": "set() method"
        },
        {
            "location": "/documentation/databaseclass/methods_update/#where-method",
            "text": "Purpose:   \nThe where() method is for limiting the records that get returned to only those that pass certain conditions.  Format:    where(column_name, value [, operator] | array(array(column_name, operator, value [, conjunction])))  Examples:     // Only return results where name = 'bob'\n$db->where('name', 'bob')\n\n// Only return results where the date is greater than or equal to january first 2014\n$db->where('date', '2014-01-01', '>=')\n\n// Only return results where the date is greater than or equal to january first 2014\n// and less than january 2016\n$db ->where('date', '2014-01-01', '>=')\n    ->where('date', '2016-01-01', '<')\n\n// Only return results where name = 'bob' OR name = 'jeff'\n$db ->where('name', 'bob')\n    ->orWhere('name', 'jeff')\n\n// Pass in an array...\n// Only return results where a user's name starts with 's' or was created after Jan 2016,\n// and the user is of type 'admin' or 'moderator'\n$db ->where([\n        ['created_time', '>=', '2016-01-01', 'OR'],\n        ['name', 'LIKE', 's%']\n    ])\n    ->where([\n        ['type', '=', 'admin', 'OR'],\n        ['type', '=', 'moderator']\n    ])  \n// Using the MySQL adaptor, the above produces:\n// WHERE (created_time >= '2016-01-01' OR name LIKE 's%') AND (type = 'admin' OR type = 'moderator')",
            "title": "where() method"
        },
        {
            "location": "/documentation/databaseclass/methods_update/#orwhere-method",
            "text": "Purpose:   \nThe orWhere() method is for limiting the records that get returned to only those that pass certain conditions.   Similar To:   \nIt works identically to the where() method except any conditions passed to it will be conjoined with 'OR' to any other Where declarations. See the where() section for more examples.  Examples:     // Only return users who are named bob and also admins, or users named jeff\n$db ->where([\n        ['name', 'bob'],\n        ['type', 'admin']\n    ])\n    ->orWhere('name', 'jeff')\n// Using the MySQL adaptor, the above produces:\n// WHERE (name = 'bob' AND type = 'admin') OR (name = 'jeff')",
            "title": "orWhere() method"
        },
        {
            "location": "/documentation/databaseclass/methods_update/#in-method",
            "text": "Purpose:   \nThe in() method is for checking if a column's value exists in another set of data.  Format:      in(column, value | string(value1, value2, value3, ...) | array(value1, value2, value3, ...))  Examples:    // Check if column value matches a single value (same as using where statement)\n$db ->in('name', 'bob')\n\n// Check if column value is present in a comma separated list\n// Note: The list gets translated into an array by the Database class.\n$db ->in('name', 'bob, jeff, susan')\n\n// Check if column value is present in an array of values\n$db ->in('name', ['bob', 'jeff', 'susan'])\n\n// NOT RECOMMENDED as it breaks cross-database functionality, but possible\n$db ->in('name', 'SELECT name FROM users WHERE name LIKE s%')\n// The better way of doing the above is to do a query to grab all the names that start with 's',\n// then pass the result set as an array to the in() method. This would preserve cross-database\n// functionality and not lock you into databases that support your SQL statement.  format as having(). For examples see the syntactially identical orWhere() method.",
            "title": "in() method"
        },
        {
            "location": "/documentation/databaseclass/methods_update/#orderby-method",
            "text": "Purpose:   \nThe orderBy() method is for ordering the returned results from your query.  Format:    // sort_direction = DESC (descending) | ASC (ascending)\norderBy(column_name, sort_direction)  Examples:    // Specifying a single column to order by...\n$db ->orderBy('name', 'ASC')\n\n// Specifying multiple columns to order by...\n$db ->orderBy('users.name', 'DESC')\n    ->orderBy('locations.name', 'DESC')",
            "title": "orderBy() method"
        },
        {
            "location": "/documentation/databaseclass/methods_update/#limit-method",
            "text": "Purpose:   \nThe limit() method is for limiting the number of returned results from a query.  Format:      limit(number)  Examples:      // Limit the number of result rows to 10\n$db ->limit(10)",
            "title": "limit() method"
        },
        {
            "location": "/documentation/databaseclass/methods_insert/",
            "text": "Database Class Methods\n\n\ninsert() method\n\n\nPurpose:\n \n\nThe insert() method is for specifying the column names you want to insert into.\n\n\nFormat:\n   \n\n\nin(column | string(column1, column2, column3, ...) | array(column1, column2, column3, ...))\n\n\n\n\nExamples:\n \n\n\n// Insert two users 'Bob' and 'John' into the users table.\n$db ->insert('name, email, type')\n    ->into('users')\n    ->values([['bob', 'bob@gmail.com', 'admin'], ['john', 'john@gmail.com', 'admin']])\n    ->exec();\n\n\n\n\ninto() method\n\n\nAlias:\n \n\nThis method is an alias of table().\n\n\nPurpose:\n \n\nThe into() method is for selecting the table(s) you want to insert data into.\n\n\nFormat:\n  \n\n\ninto(table_name | array(table_name1, table_name2, ...))\n\n\n\n\nvalues() method\n\n\nPurpose:\n \n\nThe values() method is for specifying the values you want to insert when executing an insert statement.\nIt expects either a single array when inserting a single row of data, or an array of arrays when inserting\nmultiple rows of data.\n\n\nFormat:\n   \n\n\nvalues(array(value1, value2, ...) | array(array(value1, value2, ...), array(value1, value2, ...)))\n\n\n\n\nExamples:\n \n\n\n// Insert a single row of data.\n$db ->insert('name, email, type')\n    ->into('users')\n    ->values(['bob', 'bob@gmail.com', 'admin'])\n    ->exec();\n\n// Insert multiple rows of data\n$db ->insert('name, email, type')\n    ->into('users')\n    ->values([['bob', 'bob@gmail.com', 'admin'], ['john', 'john@gmail.com', 'admin']])\n    ->exec();\n\n// OR insert multiple rows of data by calling values() more than once...\n$db ->insert('name, email, type')\n    ->into('users')\n    ->values(['bob', 'bob@gmail.com', 'admin'])\n    ->values(['john', 'john@gmail.com', 'admin'])\n    ->exec();",
            "title": "INSERT Methods"
        },
        {
            "location": "/documentation/databaseclass/methods_insert/#database-class-methods",
            "text": "",
            "title": "Database Class Methods"
        },
        {
            "location": "/documentation/databaseclass/methods_insert/#insert-method",
            "text": "Purpose:   \nThe insert() method is for specifying the column names you want to insert into.  Format:      in(column | string(column1, column2, column3, ...) | array(column1, column2, column3, ...))  Examples:    // Insert two users 'Bob' and 'John' into the users table.\n$db ->insert('name, email, type')\n    ->into('users')\n    ->values([['bob', 'bob@gmail.com', 'admin'], ['john', 'john@gmail.com', 'admin']])\n    ->exec();",
            "title": "insert() method"
        },
        {
            "location": "/documentation/databaseclass/methods_insert/#into-method",
            "text": "Alias:   \nThis method is an alias of table().  Purpose:   \nThe into() method is for selecting the table(s) you want to insert data into.  Format:     into(table_name | array(table_name1, table_name2, ...))",
            "title": "into() method"
        },
        {
            "location": "/documentation/databaseclass/methods_insert/#values-method",
            "text": "Purpose:   \nThe values() method is for specifying the values you want to insert when executing an insert statement.\nIt expects either a single array when inserting a single row of data, or an array of arrays when inserting\nmultiple rows of data.  Format:      values(array(value1, value2, ...) | array(array(value1, value2, ...), array(value1, value2, ...)))  Examples:    // Insert a single row of data.\n$db ->insert('name, email, type')\n    ->into('users')\n    ->values(['bob', 'bob@gmail.com', 'admin'])\n    ->exec();\n\n// Insert multiple rows of data\n$db ->insert('name, email, type')\n    ->into('users')\n    ->values([['bob', 'bob@gmail.com', 'admin'], ['john', 'john@gmail.com', 'admin']])\n    ->exec();\n\n// OR insert multiple rows of data by calling values() more than once...\n$db ->insert('name, email, type')\n    ->into('users')\n    ->values(['bob', 'bob@gmail.com', 'admin'])\n    ->values(['john', 'john@gmail.com', 'admin'])\n    ->exec();",
            "title": "values() method"
        },
        {
            "location": "/documentation/databaseclass/methods_delete/",
            "text": "Database Class Methods\n\n\ndelete() method\n\n\nPurpose:\n \n\nThe delete() method tells the database class that you want to delete some records from a database table/collection.\n\n\nFormat:\n  \n\n\ndelete()\n\n\n\n\nExamples:\n  \n\n\n// Delete all the records from a users table where their type is 'test'\n$db ->delete()\n    ->from('users')\n    ->where('type', 'test')\n    ->exec();\n\n\n\n\nfrom() method\n\n\nAlias:\n \n\nThis method is an alias of table().\n\n\nPurpose:\n \n\nThe from() method is for selecting the table(s) you want to return or delete data from.\n\n\nFormat:\n  \n\n\nfrom(table_name | array(table_name1, table_name2, ...))\n\n\n\n\nExamples:\n   \n\n\n// Grab a single table\n$db->from('users')\n\n// OR join multiple tables\n$db->from('users')\n   ->from('user_profiles')\n\n// OR grab multiple tables by passing in an array\n$db->from(['users', 'user_profiles'])\n\n\n\n\nwhere() method\n\n\nPurpose:\n \n\nThe where() method is for limiting the records that get returned to only those that pass certain conditions.\n\n\nFormat:\n \n\n\nwhere(column_name, value [, operator] | array(array(column_name, operator, value [, conjunction])))\n\n\n\n\nExamples:\n  \n\n\n// Only return results where name = 'bob'\n$db->where('name', 'bob')\n\n// Only return results where the date is greater than or equal to january first 2014\n$db->where('date', '2014-01-01', '>=')\n\n// Only return results where the date is greater than or equal to january first 2014\n// and less than january 2016\n$db ->where('date', '2014-01-01', '>=')\n    ->where('date', '2016-01-01', '<')\n\n// Only return results where name = 'bob' OR name = 'jeff'\n$db ->where('name', 'bob')\n    ->orWhere('name', 'jeff')\n\n// Pass in an array...\n// Only return results where a user's name starts with 's' or was created after Jan 2016,\n// and the user is of type 'admin' or 'moderator'\n$db ->where([\n        ['created_time', '>=', '2016-01-01', 'OR'],\n        ['name', 'LIKE', 's%']\n    ])\n    ->where([\n        ['type', '=', 'admin', 'OR'],\n        ['type', '=', 'moderator']\n    ])  \n// Using the MySQL adaptor, the above produces:\n// WHERE (created_time >= '2016-01-01' OR name LIKE 's%') AND (type = 'admin' OR type = 'moderator')\n\n\n\n\norWhere() method\n\n\nPurpose:\n \n\nThe orWhere() method is for limiting the records that get returned to only those that pass certain conditions. \n\n\nSimilar To:\n \n\nIt works identically to the where() method except any conditions passed to it will be conjoined with 'OR' to any other Where declarations. See the where() section for more examples.\n\n\nExamples:\n  \n\n\n// Only return users who are named bob and also admins, or users named jeff\n$db ->where([\n        ['name', 'bob'],\n        ['type', 'admin']\n    ])\n    ->orWhere('name', 'jeff')\n// Using the MySQL adaptor, the above produces:\n// WHERE (name = 'bob' AND type = 'admin') OR (name = 'jeff')\n\n\n\n\nin() method\n\n\nPurpose:\n \n\nThe in() method is for checking if a column's value exists in another set of data.\n\n\nFormat:\n   \n\n\nin(column, value | string(value1, value2, value3, ...) | array(value1, value2, value3, ...))\n\n\n\n\nExamples:\n \n\n\n// Check if column value matches a single value (same as using where statement)\n$db ->in('name', 'bob')\n\n// Check if column value is present in a comma separated list\n// Note: The list gets translated into an array by the Database class.\n$db ->in('name', 'bob, jeff, susan')\n\n// Check if column value is present in an array of values\n$db ->in('name', ['bob', 'jeff', 'susan'])\n\n// NOT RECOMMENDED as it breaks cross-database functionality, but possible\n$db ->in('name', 'SELECT name FROM users WHERE name LIKE s%')\n// The better way of doing the above is to do a query to grab all the names that start with 's',\n// then pass the result set as an array to the in() method. This would preserve cross-database\n// functionality and not lock you into databases that support your SQL statement.\n\n\n\n\norderBy() method\n\n\nPurpose:\n \n\nThe orderBy() method is for ordering the returned results from your query.\n\n\nFormat:\n \n\n\n// sort_direction = DESC (descending) | ASC (ascending)\norderBy(column_name, sort_direction)\n\n\n\n\nExamples:\n \n\n\n// Specifying a single column to order by...\n$db ->orderBy('name', 'ASC')\n\n// Specifying multiple columns to order by...\n$db ->orderBy('users.name', 'DESC')\n    ->orderBy('locations.name', 'DESC')\n\n\n\n\nlimit() method\n\n\nPurpose:\n \n\nThe limit() method is for limiting the number of returned results from a query.\n\n\nFormat:\n   \n\n\nlimit(number)\n\n\n\n\nExamples:\n   \n\n\n// Limit the number of result rows to 10\n$db ->limit(10)",
            "title": "DELETE Methods"
        },
        {
            "location": "/documentation/databaseclass/methods_delete/#database-class-methods",
            "text": "",
            "title": "Database Class Methods"
        },
        {
            "location": "/documentation/databaseclass/methods_delete/#delete-method",
            "text": "Purpose:   \nThe delete() method tells the database class that you want to delete some records from a database table/collection.  Format:     delete()  Examples:     // Delete all the records from a users table where their type is 'test'\n$db ->delete()\n    ->from('users')\n    ->where('type', 'test')\n    ->exec();",
            "title": "delete() method"
        },
        {
            "location": "/documentation/databaseclass/methods_delete/#from-method",
            "text": "Alias:   \nThis method is an alias of table().  Purpose:   \nThe from() method is for selecting the table(s) you want to return or delete data from.  Format:     from(table_name | array(table_name1, table_name2, ...))  Examples:      // Grab a single table\n$db->from('users')\n\n// OR join multiple tables\n$db->from('users')\n   ->from('user_profiles')\n\n// OR grab multiple tables by passing in an array\n$db->from(['users', 'user_profiles'])",
            "title": "from() method"
        },
        {
            "location": "/documentation/databaseclass/methods_delete/#where-method",
            "text": "Purpose:   \nThe where() method is for limiting the records that get returned to only those that pass certain conditions.  Format:    where(column_name, value [, operator] | array(array(column_name, operator, value [, conjunction])))  Examples:     // Only return results where name = 'bob'\n$db->where('name', 'bob')\n\n// Only return results where the date is greater than or equal to january first 2014\n$db->where('date', '2014-01-01', '>=')\n\n// Only return results where the date is greater than or equal to january first 2014\n// and less than january 2016\n$db ->where('date', '2014-01-01', '>=')\n    ->where('date', '2016-01-01', '<')\n\n// Only return results where name = 'bob' OR name = 'jeff'\n$db ->where('name', 'bob')\n    ->orWhere('name', 'jeff')\n\n// Pass in an array...\n// Only return results where a user's name starts with 's' or was created after Jan 2016,\n// and the user is of type 'admin' or 'moderator'\n$db ->where([\n        ['created_time', '>=', '2016-01-01', 'OR'],\n        ['name', 'LIKE', 's%']\n    ])\n    ->where([\n        ['type', '=', 'admin', 'OR'],\n        ['type', '=', 'moderator']\n    ])  \n// Using the MySQL adaptor, the above produces:\n// WHERE (created_time >= '2016-01-01' OR name LIKE 's%') AND (type = 'admin' OR type = 'moderator')",
            "title": "where() method"
        },
        {
            "location": "/documentation/databaseclass/methods_delete/#orwhere-method",
            "text": "Purpose:   \nThe orWhere() method is for limiting the records that get returned to only those that pass certain conditions.   Similar To:   \nIt works identically to the where() method except any conditions passed to it will be conjoined with 'OR' to any other Where declarations. See the where() section for more examples.  Examples:     // Only return users who are named bob and also admins, or users named jeff\n$db ->where([\n        ['name', 'bob'],\n        ['type', 'admin']\n    ])\n    ->orWhere('name', 'jeff')\n// Using the MySQL adaptor, the above produces:\n// WHERE (name = 'bob' AND type = 'admin') OR (name = 'jeff')",
            "title": "orWhere() method"
        },
        {
            "location": "/documentation/databaseclass/methods_delete/#in-method",
            "text": "Purpose:   \nThe in() method is for checking if a column's value exists in another set of data.  Format:      in(column, value | string(value1, value2, value3, ...) | array(value1, value2, value3, ...))  Examples:    // Check if column value matches a single value (same as using where statement)\n$db ->in('name', 'bob')\n\n// Check if column value is present in a comma separated list\n// Note: The list gets translated into an array by the Database class.\n$db ->in('name', 'bob, jeff, susan')\n\n// Check if column value is present in an array of values\n$db ->in('name', ['bob', 'jeff', 'susan'])\n\n// NOT RECOMMENDED as it breaks cross-database functionality, but possible\n$db ->in('name', 'SELECT name FROM users WHERE name LIKE s%')\n// The better way of doing the above is to do a query to grab all the names that start with 's',\n// then pass the result set as an array to the in() method. This would preserve cross-database\n// functionality and not lock you into databases that support your SQL statement.",
            "title": "in() method"
        },
        {
            "location": "/documentation/databaseclass/methods_delete/#orderby-method",
            "text": "Purpose:   \nThe orderBy() method is for ordering the returned results from your query.  Format:    // sort_direction = DESC (descending) | ASC (ascending)\norderBy(column_name, sort_direction)  Examples:    // Specifying a single column to order by...\n$db ->orderBy('name', 'ASC')\n\n// Specifying multiple columns to order by...\n$db ->orderBy('users.name', 'DESC')\n    ->orderBy('locations.name', 'DESC')",
            "title": "orderBy() method"
        },
        {
            "location": "/documentation/databaseclass/methods_delete/#limit-method",
            "text": "Purpose:   \nThe limit() method is for limiting the number of returned results from a query.  Format:      limit(number)  Examples:      // Limit the number of result rows to 10\n$db ->limit(10)",
            "title": "limit() method"
        },
        {
            "location": "/documentation/databaseclass/methods_create/",
            "text": "Database Class Methods\n\n\ncreate() method\n\n\nPurpose:\n \n\nThe create() method tells the database class that you want to create a new table/collection.\n\n\nFormat:\n  \n\n\ncreate(new_table_name)\n\n\n\n\nExamples:\n  \n\n\n// Create a table/collection named 'locations'\n$db ->create('locations')\n    ->field('id', 'int', 'NOT NULL AUTO_INCREMENT')\n    ->field('name', 'varchar(255)')\n    ->field('address', 'varchar(255)')\n    ->field('user_id', 'int')\n    ->primaryKey('id')\n    ->foreignKey('user_id', 'users', 'id')\n    ->exec();\n\n\n\n\nfield() method\n\n\nPurpose:\n \n\nThe field() method denotes a column you want to create on a table.\n\n\nFormat:\n  \n\n\nfield(column_name, column_type, special_attributes)\n\n\n\n\nExamples:\n  \n\n\n// Create a table/collection named 'locations'\n// Create id, name, address, and user_id columns on it.\n$db ->create('locations')\n    ->field('id', 'int', 'NOT NULL AUTO_INCREMENT')\n    ->field('name', 'varchar(255)')\n    ->field('address', 'varchar(255)')\n    ->field('user_id', 'int')\n    ->primaryKey('id')\n    ->foreignKey('user_id', 'users', 'id')\n    ->exec();\n\n\n\n\nprimaryKey() method\n\n\nPurpose:\n \n\nThe primaryKey() method tells the database class you want to create a primary key index on a column if the underlying\ndatabase supports it.\n\n\nFormat:\n  \n\n\nprimaryKey(column_name)\n\n\n\n\nExamples:\n  \n\n\n// Create a table/collection named 'locations'\n// Sets the 'id' column as primary.\n$db ->create('locations')\n    ->field('id', 'int', 'NOT NULL AUTO_INCREMENT')\n    ->field('name', 'varchar(255)')\n    ->field('address', 'varchar(255)')\n    ->field('user_id', 'int')\n    ->primaryKey('id')\n    ->foreignKey('user_id', 'users', 'id')\n    ->exec();\n\n\n\n\nforeignKey() method\n\n\nPurpose:\n \n\nThe foreignKey() method tells the database class that you want to create for foreign key relationship\nbetween a column on the table you are creating and a column in a different table.\n\n\nFormat:\n  \n\n\nforeignKey(column_name, foreign_table_name, foreign_column_name)\n\n\n\n\nExamples:\n  \n\n\n// Create a table/collection named 'locations'\n// Creates a relationship between the user_id column on this table and the\n// 'id' column on a different 'users' table.\n$db ->create('locations')\n    ->field('id', 'int', 'NOT NULL AUTO_INCREMENT')\n    ->field('name', 'varchar(255)')\n    ->field('address', 'varchar(255)')\n    ->field('user_id', 'int')\n    ->primaryKey('id')\n    ->foreignKey('user_id', 'users', 'id')\n    ->exec();",
            "title": "CREATE Methods"
        },
        {
            "location": "/documentation/databaseclass/methods_create/#database-class-methods",
            "text": "",
            "title": "Database Class Methods"
        },
        {
            "location": "/documentation/databaseclass/methods_create/#create-method",
            "text": "Purpose:   \nThe create() method tells the database class that you want to create a new table/collection.  Format:     create(new_table_name)  Examples:     // Create a table/collection named 'locations'\n$db ->create('locations')\n    ->field('id', 'int', 'NOT NULL AUTO_INCREMENT')\n    ->field('name', 'varchar(255)')\n    ->field('address', 'varchar(255)')\n    ->field('user_id', 'int')\n    ->primaryKey('id')\n    ->foreignKey('user_id', 'users', 'id')\n    ->exec();",
            "title": "create() method"
        },
        {
            "location": "/documentation/databaseclass/methods_create/#field-method",
            "text": "Purpose:   \nThe field() method denotes a column you want to create on a table.  Format:     field(column_name, column_type, special_attributes)  Examples:     // Create a table/collection named 'locations'\n// Create id, name, address, and user_id columns on it.\n$db ->create('locations')\n    ->field('id', 'int', 'NOT NULL AUTO_INCREMENT')\n    ->field('name', 'varchar(255)')\n    ->field('address', 'varchar(255)')\n    ->field('user_id', 'int')\n    ->primaryKey('id')\n    ->foreignKey('user_id', 'users', 'id')\n    ->exec();",
            "title": "field() method"
        },
        {
            "location": "/documentation/databaseclass/methods_create/#primarykey-method",
            "text": "Purpose:   \nThe primaryKey() method tells the database class you want to create a primary key index on a column if the underlying\ndatabase supports it.  Format:     primaryKey(column_name)  Examples:     // Create a table/collection named 'locations'\n// Sets the 'id' column as primary.\n$db ->create('locations')\n    ->field('id', 'int', 'NOT NULL AUTO_INCREMENT')\n    ->field('name', 'varchar(255)')\n    ->field('address', 'varchar(255)')\n    ->field('user_id', 'int')\n    ->primaryKey('id')\n    ->foreignKey('user_id', 'users', 'id')\n    ->exec();",
            "title": "primaryKey() method"
        },
        {
            "location": "/documentation/databaseclass/methods_create/#foreignkey-method",
            "text": "Purpose:   \nThe foreignKey() method tells the database class that you want to create for foreign key relationship\nbetween a column on the table you are creating and a column in a different table.  Format:     foreignKey(column_name, foreign_table_name, foreign_column_name)  Examples:     // Create a table/collection named 'locations'\n// Creates a relationship between the user_id column on this table and the\n// 'id' column on a different 'users' table.\n$db ->create('locations')\n    ->field('id', 'int', 'NOT NULL AUTO_INCREMENT')\n    ->field('name', 'varchar(255)')\n    ->field('address', 'varchar(255)')\n    ->field('user_id', 'int')\n    ->primaryKey('id')\n    ->foreignKey('user_id', 'users', 'id')\n    ->exec();",
            "title": "foreignKey() method"
        },
        {
            "location": "/documentation/databaseclass/databaseresult/",
            "text": "",
            "title": "DatabaseResult Class"
        },
        {
            "location": "/documentation/mvc/overview/",
            "text": "",
            "title": "Overview"
        },
        {
            "location": "/documentation/mvc/models/",
            "text": "",
            "title": "Models"
        },
        {
            "location": "/documentation/mvc/views/",
            "text": "",
            "title": "Views"
        },
        {
            "location": "/documentation/mvc/controllers/",
            "text": "",
            "title": "Controllers"
        },
        {
            "location": "/documentation/routing/overview/",
            "text": "",
            "title": "Routing"
        },
        {
            "location": "/documentation/validationclass/overview/",
            "text": "Cora's Validation class\n\n\nThe Validate class is for checking that data matches a set of restrictions. For instance, if you have a form for users to submit and want to require that they fill out the 'email' field and enter something that at least looks like a valid email, Validate can help with that. It's main usage will typically be for validating form submissions, but it can be used to validate any data you pass in.\n\n\nNote that the Validate class must be called from a Controller as any errors returned will be loaded into that controller's \"$this->data->errors\" data member!\n\n\nFront-end vs. Back-end Validation:\n   \n\n\nIf you are unfamiliar with form validation, it's worth mentioning that front-end Javascript validators are easier to setup and can save you that tiny bit of server processing power if efficiency is important. The main drawbacks of front-end validation is that it can be \nbypassed\n (important to know if you didn't already know that) and you have to setup a special API in order to do things like check if a Username is already taken, etc. For this reason, for validation that is even remotely important, you should either use back-end validation like this Validation class provides, or use both a front-end validator and this class on the backend (in-case a user bypasses the front-end validation code).\n\n\nExample Usage\n\n\n// This is a method within a controller.\npublic function createPOST()\n{\n    // Load Validate\n    $this->load->library('Validate', $this, true);  \n\n    // Define validation rules for form inputs.\n    $this->Validate->rule('username', 'required|max_length[55]|trim');\n    $this->Validate->rule('email', 'required|valid_email');\n    $this->Validate->rule('password', 'required');\n    $this->Validate->rule('password2', 'required|matches[password]');\n\n    // Initiate validation\n    if ($this->Validate->run()) {        \n        // Form validation was successful! Do stuff with data.\n    }\n    else {      \n        // The form validation failed!\n        // Redisplay the form to the user so they can fix the errors.\n        $this->create();\n    }\n}\n\n\n\n\nIf you are using the Cora demo project, you can find an example form being used at:\n\n\n/controllers/articles/controller.News.php\n\n\n\n\nWhich can be navigated to in your web browser by going to:\n\n\nlocalhost/myProject/articles/news/create/\n\n\n\n\nTypical Usage Steps\n\n\nUsage typically includes the following steps:\n\n\n\n\nLoad the validation class.\n\n\nDefine any custom validation checks you need.\n\n\nApply validation checks to pieces of data by defining the rules that data must obey.\n\n\nRun the validation checker.\n\n\nDisplay any errors to the user and repopulate the form they submitted if necessary.\n\n\n\n\nLoading\n\n\nAlthough you can certainly load Validate like any other class, the recommended way of loading it into your controller is to use the Load class. The load class handles some references stuff for you automatically which I'll explain later. To use the Load class to get Validate, add the following to your controller:\n\n\n// Recommended way of setup\n$this->load->library('Validate', $this, true);\n\n\n\n\nThe fact that we're specifying that we want to load the Validate class as the first parameter should make sense. What you're probably wondering about is what the other two parameters do. For the 2nd parameter we're passing a reference to the current controller; Validate uses this reference to load any validation errors generated into that controller's \"$this->data->errors\" data member. The third parameter being true tells the Load class to create a reference in the calling controller to Validate for you. In other words it does the equivalent of this:\n\n\n$this->data->Validate = new \\Validate($this);\n\n\n\n\nOk... but why do you need a reference to Validate in the controller like that? Because in order to use Validate's form repopulation methods within a View file, you need a reference to Validate in the data you pass to that view! If this doesn't make sense at the moment, don't worry about it. You might understand it better once you see usage examples below, and even if you don't, it's not important so long as you follow the recommended way of loading specified above.\n\n\nBuilt-In Validation Checks\n\n\nThere are a few built-in validation checks for common concerns. They are:\n\n\n\n\n\n    \n'Check' Name\n\n    \nDescription\n\n\n\n\n\n    \nrequired\n\n    \nSpecifies that a value must be entered for this field (specifying form fields that MUST be filled out).\n\n\n\n\n\n    \nvalid_email\n\n    \nSpecifies that the value must match a valid email pattern.\n\n\n\n\n\n    \nmatches[name]\n\n    \nSpecifies that this field must match the one specified in the brackets (I.E. does 'password' match 'password2'?)\n\n\n\n\n\n    \nmin_length[x]\n\n    \nSpecifies that this field must be at least X characters in length.\n\n\n\n\n\n    \nmax_length[x]\n\n    \nSpecifies that this field must be at most X characters in length.\n\n\n\n\n\n    \ntrim\n\n    \nTrims whitespace from the beginning and end of the field. Doesn't ever fail, this is just a utility method.\n\n\n\n\n\n\n\nHowever, while these work great for general purpose kinda validations, there might be times when you need to check something specific such as \"Is this username already taken?\" In those scenarios you will need to define your own validation \"check\" which can then be applied to a field just like the built-in ones.\n\n\nCustom Validation Checks\n\n\nCustom validation checks allow you to call a method from whatever class you want within your app and pass that method the input value. Below is an example of us defining a custom check that calls a method named \"isNameAvailable\" within our User class, so that we can check if a username a person wants is available when they register. (Note: The 4th parameter is the error message if the name isn't available.)\n\n\nDefining a custom validation check is easy. Here's an example:\n\n\n// Define the check\n$this->Validate->def('userNameAvailable', 'User','isNameAvailable', 'Username already taken.');\n\n// Use the check in a rule\n$this->Validate->rule('username', 'required|userNameAvailable');\n\n\n\n\nThe \"def\" method takes 4 required parameters, and an optional 5th one. Below is the function signature and a description of what each parameter does:\n\n\n$this->Validate->def($checkName, $class, $method, $errorMessageOnFailure, $passingResponse);\n\n\n\n\n\n\n\n    \nParameter Name\n\n    \nDescription\n\n\n\n\n\n    \n$checkName\n\n    \nThis is the name of your new custom check. It's what you will include when defining your data rules.\n\n\n\n\n\n    \n$class\n\n    \nThe class within your app that we want to invoke for this custom check.\n\n\n\n\n\n    \n$method\n\n    \nThe method within that Class that we want to call and pass our input to.\n\n\n\n\n\n    \n$errorMessageOnFailure\n\n    \nThe message to display if this check does not pass.\n\n\n\n\n\n    \n$passingResponse\n\n    \n[OPTIONAL] Custom check methods are expected to return a TRUE or FALSE response when given the form input. This specifies which response is the passing one! By default this is set to TRUE. See below for examples.\n\n\n\n\n\n\n\nSo the optional 5th parameter when defining a custom check needs a little explaining. Basically, whatever methods you call for custom checks are expected to return True or False when given a certain input. However, which response \"passes\" the check, depends on how the method is written - and is why this optional 5th parameter exists. See the examples below:\n\n\n// Example 1 - A 'TRUE' value means the check passes.\n// Check passes if 'isNameAvailable' returns TRUE.\n$this->Validate->def('userNameAvailable', 'User','isNameAvailable', 'Username already taken.', TRUE);\n$this->Validate->rule('username', 'required|userNameAvailable');\n\n// Example 2 - A 'FALSE' value means the check passes.\n// Check passes if 'isNameTaken' returns FALSE.\n$this->Validate->def('userNameIsTaken', 'User','isNameTaken', 'Username already taken.', FALSE);\n$this->Validate->rule('username', 'required|userNameIsTaken');\n\n\n\n\nHuman Readable Field Names\n\n\nIf you have a form input that has a name which isn't super user friendly, you can replace the name of the input in any error messages with a custom specified name by specifying an optional 3rd parameter when making your rules:\n\n\n$this->Validate->rule('password2', 'required|matches[password]', 'Password Confirmation');\n\n\n\n\nThis will result in the following error message if validation fails: \n\n\n\"Password Confirmation does not match password!\"\n\n\nDisplaying errors\n\n\nFrom within a View, the array of errors can be found within the \"$errors\" variable. They can be displayed by using the Load class' \"repeat\" method (this is the easiest way), or else you can manually iterate over the errors. Both methods are shown below:\n\n\nRepeat Method:\n   \n\n\n// Parameter 1 = Array to iterate over.\n// Parameter 2 = Tag to surround array items with.\n// Parameter 3 = [OPTIONAL] CSS class to attach to each item.\n// Parameter 4 = [OPTIONAL] Tag to wrap entire repeat block with.\n// Parameter 5 = [OPTIONAL] CSS class to attach to wrapper.\n<?= $this->repeat($errors, 'li', 'item', 'ul', 'list'); ?>\n\n\n\n\nGenerates:\n\n\n<ul class=\"list\">\n    <li class=\"item\">Error 1</li>\n    <li class=\"item\">Error 2</li>\n    ...\n</ul>\n\n\n\n\nOR\n\n\nManual Method:\n   \n\n\n<?php if (isset($errors)) { ?>\n    <ul>\n        <?php foreach ($errors as $error) { ?>\n            <li><?= $error; ?></li>\n        <?php } ?>\n    </ul>\n<?php } ?>\n\n\n\n\nRepopulating Forms\n\n\nThere's three methods in the Validate class that are designed to help you repopulate a form if validation fails.\n\n\n// For repopulating text boxes and text areas.\n$Validate->setField($fieldName, $defaultValue = '')\n\n// For repopulating check boxes and ratio buttons.\n$Validate->setCheckbox($fieldName, $fieldValue, $checkedByDefault = FALSE)\n\n// For repopulating select boxes.\n$Validate->setSelect($fieldName, $fieldValue, $selectedByDefault = FALSE)\n\n\n\n\nThese need to be echo'ed inside the HTML tag in question. See below for an example of a complete form with errors display and repopulation of the fields:\n\n\n\n\n\n<h1>Create Article</h1>\n<form method=\"POST\">\n\n    <?= $this->repeat($errors, 'li', 'item', 'ul', 'list'); ?>\n\n\n    <div>\n        <h3>Title:</h3>\n        <input type=\"text\" name=\"title\" value=\"<?= $Validate->setField('title', 'test'); ?>\">\n    </div>\n    <div>\n        <h3>Content:</h3>\n        <textarea name=\"content\"><?= $Validate->setField('content'); ?></textarea>\n    </div>\n    <br>\n\n    <div>\n        Item 1:<input type=\"checkbox\" name=\"mycheck[]\" value=\"1\" <?=$Validate->setCheckbox('mycheck', '1');?>>\n        <br>\n        Item 2:<input type=\"checkbox\" name=\"mycheck[]\" value=\"2\" <?=$Validate->setCheckbox('mycheck', '2', true);?>>\n    </div>\n    <br>\n\n    <div>\n        <select name=\"myselect\">\n            <option value=\"Option One\" <?= $Validate->setSelect('myselect', 'Option One'); ?> >One</option>\n            <option value=\"Option Two\" <?= $Validate->setSelect('myselect', 'Option Two', true); ?> >Two</option>\n            <option value=\"Option Three\" <?= $Validate->setSelect('myselect', 'Option Three'); ?> >Three</option>\n        </select>\n    </div>\n    <br>\n\n    <input type=\"submit\" value=\"Submit\">\n</form>",
            "title": "Validate Class"
        },
        {
            "location": "/documentation/validationclass/overview/#coras-validation-class",
            "text": "The Validate class is for checking that data matches a set of restrictions. For instance, if you have a form for users to submit and want to require that they fill out the 'email' field and enter something that at least looks like a valid email, Validate can help with that. It's main usage will typically be for validating form submissions, but it can be used to validate any data you pass in.  Note that the Validate class must be called from a Controller as any errors returned will be loaded into that controller's \"$this->data->errors\" data member!  Front-end vs. Back-end Validation:      If you are unfamiliar with form validation, it's worth mentioning that front-end Javascript validators are easier to setup and can save you that tiny bit of server processing power if efficiency is important. The main drawbacks of front-end validation is that it can be  bypassed  (important to know if you didn't already know that) and you have to setup a special API in order to do things like check if a Username is already taken, etc. For this reason, for validation that is even remotely important, you should either use back-end validation like this Validation class provides, or use both a front-end validator and this class on the backend (in-case a user bypasses the front-end validation code).",
            "title": "Cora's Validation class"
        },
        {
            "location": "/documentation/validationclass/overview/#example-usage",
            "text": "// This is a method within a controller.\npublic function createPOST()\n{\n    // Load Validate\n    $this->load->library('Validate', $this, true);  \n\n    // Define validation rules for form inputs.\n    $this->Validate->rule('username', 'required|max_length[55]|trim');\n    $this->Validate->rule('email', 'required|valid_email');\n    $this->Validate->rule('password', 'required');\n    $this->Validate->rule('password2', 'required|matches[password]');\n\n    // Initiate validation\n    if ($this->Validate->run()) {        \n        // Form validation was successful! Do stuff with data.\n    }\n    else {      \n        // The form validation failed!\n        // Redisplay the form to the user so they can fix the errors.\n        $this->create();\n    }\n}  If you are using the Cora demo project, you can find an example form being used at:  /controllers/articles/controller.News.php  Which can be navigated to in your web browser by going to:  localhost/myProject/articles/news/create/",
            "title": "Example Usage"
        },
        {
            "location": "/documentation/validationclass/overview/#typical-usage-steps",
            "text": "Usage typically includes the following steps:   Load the validation class.  Define any custom validation checks you need.  Apply validation checks to pieces of data by defining the rules that data must obey.  Run the validation checker.  Display any errors to the user and repopulate the form they submitted if necessary.",
            "title": "Typical Usage Steps"
        },
        {
            "location": "/documentation/validationclass/overview/#loading",
            "text": "Although you can certainly load Validate like any other class, the recommended way of loading it into your controller is to use the Load class. The load class handles some references stuff for you automatically which I'll explain later. To use the Load class to get Validate, add the following to your controller:  // Recommended way of setup\n$this->load->library('Validate', $this, true);  The fact that we're specifying that we want to load the Validate class as the first parameter should make sense. What you're probably wondering about is what the other two parameters do. For the 2nd parameter we're passing a reference to the current controller; Validate uses this reference to load any validation errors generated into that controller's \"$this->data->errors\" data member. The third parameter being true tells the Load class to create a reference in the calling controller to Validate for you. In other words it does the equivalent of this:  $this->data->Validate = new \\Validate($this);  Ok... but why do you need a reference to Validate in the controller like that? Because in order to use Validate's form repopulation methods within a View file, you need a reference to Validate in the data you pass to that view! If this doesn't make sense at the moment, don't worry about it. You might understand it better once you see usage examples below, and even if you don't, it's not important so long as you follow the recommended way of loading specified above.",
            "title": "Loading"
        },
        {
            "location": "/documentation/validationclass/overview/#built-in-validation-checks",
            "text": "There are a few built-in validation checks for common concerns. They are:   \n     'Check' Name \n     Description   \n     required \n     Specifies that a value must be entered for this field (specifying form fields that MUST be filled out).   \n     valid_email \n     Specifies that the value must match a valid email pattern.   \n     matches[name] \n     Specifies that this field must match the one specified in the brackets (I.E. does 'password' match 'password2'?)   \n     min_length[x] \n     Specifies that this field must be at least X characters in length.   \n     max_length[x] \n     Specifies that this field must be at most X characters in length.   \n     trim \n     Trims whitespace from the beginning and end of the field. Doesn't ever fail, this is just a utility method.    However, while these work great for general purpose kinda validations, there might be times when you need to check something specific such as \"Is this username already taken?\" In those scenarios you will need to define your own validation \"check\" which can then be applied to a field just like the built-in ones.",
            "title": "Built-In Validation Checks"
        },
        {
            "location": "/documentation/validationclass/overview/#custom-validation-checks",
            "text": "Custom validation checks allow you to call a method from whatever class you want within your app and pass that method the input value. Below is an example of us defining a custom check that calls a method named \"isNameAvailable\" within our User class, so that we can check if a username a person wants is available when they register. (Note: The 4th parameter is the error message if the name isn't available.)  Defining a custom validation check is easy. Here's an example:  // Define the check\n$this->Validate->def('userNameAvailable', 'User','isNameAvailable', 'Username already taken.');\n\n// Use the check in a rule\n$this->Validate->rule('username', 'required|userNameAvailable');  The \"def\" method takes 4 required parameters, and an optional 5th one. Below is the function signature and a description of what each parameter does:  $this->Validate->def($checkName, $class, $method, $errorMessageOnFailure, $passingResponse);   \n     Parameter Name \n     Description   \n     $checkName \n     This is the name of your new custom check. It's what you will include when defining your data rules.   \n     $class \n     The class within your app that we want to invoke for this custom check.   \n     $method \n     The method within that Class that we want to call and pass our input to.   \n     $errorMessageOnFailure \n     The message to display if this check does not pass.   \n     $passingResponse \n     [OPTIONAL] Custom check methods are expected to return a TRUE or FALSE response when given the form input. This specifies which response is the passing one! By default this is set to TRUE. See below for examples.    So the optional 5th parameter when defining a custom check needs a little explaining. Basically, whatever methods you call for custom checks are expected to return True or False when given a certain input. However, which response \"passes\" the check, depends on how the method is written - and is why this optional 5th parameter exists. See the examples below:  // Example 1 - A 'TRUE' value means the check passes.\n// Check passes if 'isNameAvailable' returns TRUE.\n$this->Validate->def('userNameAvailable', 'User','isNameAvailable', 'Username already taken.', TRUE);\n$this->Validate->rule('username', 'required|userNameAvailable');\n\n// Example 2 - A 'FALSE' value means the check passes.\n// Check passes if 'isNameTaken' returns FALSE.\n$this->Validate->def('userNameIsTaken', 'User','isNameTaken', 'Username already taken.', FALSE);\n$this->Validate->rule('username', 'required|userNameIsTaken');",
            "title": "Custom Validation Checks"
        },
        {
            "location": "/documentation/validationclass/overview/#human-readable-field-names",
            "text": "If you have a form input that has a name which isn't super user friendly, you can replace the name of the input in any error messages with a custom specified name by specifying an optional 3rd parameter when making your rules:  $this->Validate->rule('password2', 'required|matches[password]', 'Password Confirmation');  This will result in the following error message if validation fails:   \"Password Confirmation does not match password!\"",
            "title": "Human Readable Field Names"
        },
        {
            "location": "/documentation/validationclass/overview/#displaying-errors",
            "text": "From within a View, the array of errors can be found within the \"$errors\" variable. They can be displayed by using the Load class' \"repeat\" method (this is the easiest way), or else you can manually iterate over the errors. Both methods are shown below:  Repeat Method:      // Parameter 1 = Array to iterate over.\n// Parameter 2 = Tag to surround array items with.\n// Parameter 3 = [OPTIONAL] CSS class to attach to each item.\n// Parameter 4 = [OPTIONAL] Tag to wrap entire repeat block with.\n// Parameter 5 = [OPTIONAL] CSS class to attach to wrapper.\n<?= $this->repeat($errors, 'li', 'item', 'ul', 'list'); ?>  Generates:  <ul class=\"list\">\n    <li class=\"item\">Error 1</li>\n    <li class=\"item\">Error 2</li>\n    ...\n</ul>  OR  Manual Method:      <?php if (isset($errors)) { ?>\n    <ul>\n        <?php foreach ($errors as $error) { ?>\n            <li><?= $error; ?></li>\n        <?php } ?>\n    </ul>\n<?php } ?>",
            "title": "Displaying errors"
        },
        {
            "location": "/documentation/validationclass/overview/#repopulating-forms",
            "text": "There's three methods in the Validate class that are designed to help you repopulate a form if validation fails.  // For repopulating text boxes and text areas.\n$Validate->setField($fieldName, $defaultValue = '')\n\n// For repopulating check boxes and ratio buttons.\n$Validate->setCheckbox($fieldName, $fieldValue, $checkedByDefault = FALSE)\n\n// For repopulating select boxes.\n$Validate->setSelect($fieldName, $fieldValue, $selectedByDefault = FALSE)  These need to be echo'ed inside the HTML tag in question. See below for an example of a complete form with errors display and repopulation of the fields:   <h1>Create Article</h1>\n<form method=\"POST\">\n\n    <?= $this->repeat($errors, 'li', 'item', 'ul', 'list'); ?>\n\n\n    <div>\n        <h3>Title:</h3>\n        <input type=\"text\" name=\"title\" value=\"<?= $Validate->setField('title', 'test'); ?>\">\n    </div>\n    <div>\n        <h3>Content:</h3>\n        <textarea name=\"content\"><?= $Validate->setField('content'); ?></textarea>\n    </div>\n    <br>\n\n    <div>\n        Item 1:<input type=\"checkbox\" name=\"mycheck[]\" value=\"1\" <?=$Validate->setCheckbox('mycheck', '1');?>>\n        <br>\n        Item 2:<input type=\"checkbox\" name=\"mycheck[]\" value=\"2\" <?=$Validate->setCheckbox('mycheck', '2', true);?>>\n    </div>\n    <br>\n\n    <div>\n        <select name=\"myselect\">\n            <option value=\"Option One\" <?= $Validate->setSelect('myselect', 'Option One'); ?> >One</option>\n            <option value=\"Option Two\" <?= $Validate->setSelect('myselect', 'Option Two', true); ?> >Two</option>\n            <option value=\"Option Three\" <?= $Validate->setSelect('myselect', 'Option Three'); ?> >Three</option>\n        </select>\n    </div>\n    <br>\n\n    <input type=\"submit\" value=\"Submit\">\n</form>",
            "title": "Repopulating Forms"
        },
        {
            "location": "/computerscience/computability/",
            "text": "Computability\n\n\nModern computers are based on what's called a Turing Machine, which was the first general purpose type of computer. What can a Turing Machine based computer compute? What can\u2019t a turing machine based computer compute? \nWhat kind of problems are impractical to compute for anything other than really small data sets? We\u2019ll briefly explore these questions below.\n\n\nStraight up Non-Computable\n\n\nLet's first talk about problems that current computers simply cannot compute.\n\n\nThe Halting Problem\n\n\nIf you are a software developer, you undoubtably have encountered infinite loops. Unlike interpretted\nlanguages such as PHP which will time out, lower level languages such as C++ will just keep running in an infinite loop forever if one exists.\nWith this in mind, it may seem like a good idea for someone to create a debugging program that detects those kinds of run-time errors in apps.\nHowever, you may be surprised to learn that \nthe reason why no such program exists is because it's impossible for a computer to determine if an\narbitrary computer program and input will finish running or not.\n\n\nTo informally prove this, let's assume we have a function called \"does_it_halt\" which we can pass an arbitrary program and input to and have it\ntell us if the program will halt or loop indefinitely.\n\n\n\n\nAssumption:\n \n\nThere exists a way for a computer to detect if any arbitrary program and input will halt or not.\n\n\n\n\nWith that assumption, let's assume someone wrote the following function as a simple way to utilize this knowledge:\n\n\nfunction does_it_halt(program, input) {\n    if (eventually halts)\n        return true;\n    else\n        return false;\n}\n\n\n\n\nFor simplicity's sake let's also say someone wrote wrapper for this function that passes the program as the input. Remember that our\ndoes_it_halt method is supposed to work on any arbitrary input, so passing in the memory location or text of a program works just fine.\n\n\nfunction debug_app(program) {\n    return does_it_halt(program, program);\n}\n\n\n\n\nAlright, hopefully you'll agree this is pretty straight forward. Now let's say someone really smart informed us that our does_it_halt function\ncouldn't possibly work, but we didn't believe him. As a result, he decided to write a cheeky little function called paradox that does the following:\n\n\nfunction paradox(program) {\n    if(debug_app(program))\n        while(1) {};\n    else\n        return true;\n}\n\necho debug_app(paradox);\n\n\n\n\nHa ha ha... so this dude wrote a function that puts itself into an intentional infinite loop if the does_it_halt says the program stops,\nand returns \"true\" if the program does not stop. Then he follows this up by calling our debug function on his code. \nSurely this is the most useless bit of code ever written right?\n\n\nWell, before we can answer that, we have to examine what happens when this dude calls debug_app(paradox).\n\n\nLet's say our debug_app() method returns true when passed Paradox. Let's logically think through what that means in terms of execution:\n\n\n\n\nFirst up, since \"echo debug_app(Paradox)\" returned True, that means that Paradox halts.\n\n\nIn the process of testing if Paradox halts, does_it_halt(), somewhere in its magical logic would have to run Paradox with the given input. That input is also a reference to Paradox. So the call to paradox would look like \"paradox(paradox)\".\n\n\nHowever, inside of Paradox is also a call to debug_app()! This call to \"debug_app(program)\" within Paradox would resolve to \"debug_app(Paradox)\" at runtime.\n\n\nIn order for does_it_halt to detect that Paradox halts, that means the call to \"debug_app(Paradox)\" within Paradox returns False, because otherwise Paradox would send itself into an infinite loop.\n\n\n\n\nUhh oh! Turns out that little piece of code wasn't as useless as we originally thought because it just proved that our does_it_halt function can't possibly exist as we've defined it.\nWe know from point #1 above that \"echo debug_app(Paradox)\" returns true, however, we also know that in order for that to happen, the call to \"debug_app(Paradox)\" as mentioned in point #4 above must return false. So two different calls to \"debug_app(Paradox)\" are returning differing results which is impossible. As such, our premise is proved false by what's called a Proof By Contradiction.\n\n\nThis problem (\"will a program halt\") which is unsolvable by computers by is known commonly as The Halting Problem. Alan Turing proved back in 1936 that a general algorithm to solve it is not possible.\n\n\nPost-Correspondance Problem (PCP)\n\n\nAnother quick example just to peak your interest. Let's say you have a list of some arbitrary number of dominoes which look something like this:\n\n\n\n    \nc\n\n    \ncb\n\n\n\n\n\n\n    \nac\n\n    \na\n\n\n\n\n\n\n    \nb\n\n    \nbc\n\n\n\n\n\n\n    \na\n\n    \nba\n\n\n\n\n\n\n    \na\n\n    \nc\n\n\n\n\n\n\n    \nc\n\n    \nac\n\n\n\n\n\n\n    \ncb\n\n    \n \nc\n\n\n\n\n\n\n    \naa\n\n    \nb\n\n\n\n\n\n\n\n\nYou want to have a computer tell you whether there's a way in which you can order the dominoes such that the sequence of the top row matches the sequence of the bottom row.\nHere's an example of a match where both the top and the bottom read \"abbcbba\":\n\n\n\n\n\n\n    \na\n\n    \nabb\n\n\n\n\n\n\n    \nbb\n\n    \nc\n\n\n\n\n\n\n    \ncb\n\n    \nbb\n\n\n\n\n\n\n    \nba\n\n    \na\n\n\n\n\n\n\n\n\nCan a computer program be made for you that determines if there's an ordering that results in a match for an arbitrary set of dominoes? The answer is \"no\". This is called the Post Correspondence Problem and was introduced by Emil Post back in 1946.\n\n\nEffectively Uncomputable (with our current algorithms)\n\n\nP vs NP\n\n\nIn order to discuss problems that fall into this \"effectively uncomputable\" category, we quickly need to discuss the concept of P vs. NP.\n\"P\" are a class of problems for which their exists an algorithm to both find and verify an answer in polynomial time.\n\"NP\" (non-deterministic polynomial time) are a class of problems for which there exists algorithms to verify an answer in polynomial time, but \nmay or may not\n have algorithms to find an answer.\nNote the \"may or may not\" statement... P vs. NP is actually one of the biggest unknowns in Mathematics/CS because no-one has been able to prove definitively \nthat P = NP or that P != NP. \n\n\nIf P = NP, then that means there DOES exist polynomial time algorithms to solve problems we lump into this category, but that we just haven't found them yet. If P != NP, then that would confirm that no such polynomial time algorithms exist, and we could stop looking. There has been a 1 million dollar reward on the table since the year 2000 for anyone that can prove this one way or the other.\n\n\nSo if you're wondering at this point what the heck polynomial time is, and wishing you could remember all your math lessons from high school, no fear - let's look at an example:\n\n\nx^3 + 2x^2 + 3x = A Polynomial\n\n\n\n\nThe importance of polynomials is that they, and anything less complex than them, can be quickly solved by computers. Equations can be generally clumped into one of a number of different time groups:\n\n\ny = 1       // Constant time\ny = x       // Linear time\ny = x^2     // Polynomial time\ny = 2^x     // Exponential time\ny = x!      // Factorial time\n\n\n\n\nFor a more complete list of time complexities see: \nTime Complexity\n.\n\n\nThe problems we will be discussing which fall into this \"practically uncomputable\" category are \"NP\" problems for which we have no good algorithms to solve them. These are technically referred to as the \"NP-Complete\" class of problems, a term coined in the 1970s by researchers who realized that these problems are all essentially variations of the same thing, and if a solution could be found for one of them, it would mean all of them could in turn be solved.\n\n\nFor a good video on this topic, I'd recommend the following:\n\n\n\n\n\nThe Travelling Salesman Problem\n\n\nThe travelling salesman problem is a certain instance of a problem that has many general purpose applications. The scenario goes like this: you are a salesman who needs to travel to a bunch of cities, and end your trip where you started in your home city. You obviously want to minimize your travel time by taking the most efficient route that takes you through all the cities.\n\n\nFor an example of this problem, let's use a scenario where we want to visit just 4 cities, and so starting at city A, we need to calculate the optimal route. Each city has a travel time \"cost\" to travel between them that we'll use to calculate the best route.\n\n\n\n\nWe are starting in city A, so we just need to evaluate all our options that take us through all the cities and add up the travel costs like so:\n\n\n\n    \n\n        \nRoute\nRoute Costs\nTotal Cost\n\n    \n\n    \n\n        \nA->B->C->D->A\n3+5+6+2\n16\n\n    \n\n    \n\n        \nA->B->D->C->A\n3+3+6+8\n20\n\n    \n\n    \n\n        \nA->D->C->B->A\n2+6+5+3\n16\n\n    \n\n    \n\n        \nA->D->B->C->A\n2+3+5+8\n18\n\n    \n\n    \n\n        \nA->C->B->D->A\n8+5+3+2\n18\n\n    \n\n    \n\n        \nA->C->D->B->A\n8+6+3+3\n20\n\n    \n\n\n\n\n\nOne thing you might notice is that there's two routes that cost 16, two routes that cost 18, and two routes that cost 20. This is because one of each of these pairs is just the same route in reverse. So if you do ABCDA, it's the same route if you do it backwards as ADCBA! For this reason we can eliminate these duplicate routes, cutting our total routes to consider in half, and narrow our choices down to 3 real options. Obviously we would choose the one that costs 16.\n\n\n\n    \n\n        \nRoute\nRoute Costs\nTotal Cost\n\n    \n\n    \n\n        \nA->B->C->D->A\n3+5+6+2\n16\n\n    \n\n    \n\n        \nA->B->D->C->A\n3+3+6+8\n20\n\n    \n\n    \n\n        \nA->C->B->D->A\n8+5+3+2\n18\n\n    \n\n\n\n\n\nNow what if we needed to travel between 5 cities instead of 4? How much extra work would this be to figure out? Let's call this 5th city 'E' and examine just a piece of this expanded problem by determining the routes possible when we start with city B:\n\n\n\n\n\n    \n\n        \nRoute\nRoute Costs\nTotal Cost\n\n    \n\n    \n\n        \nA->B->C->D->E->A\n3+5+6+4+7\n25\n\n    \n\n    \n\n        \nA->B->C->E->D->A\n3+5+2+4+2\n16\n\n    \n\n    \n\n        \nA->B->D->C->E->A\n3+3+6+2+7\n21\n\n    \n\n    \n\n        \nA->B->D->E->C->A\n3+3+4+2+8\n20\n\n    \n\n    \n\n        \nA->B->E->C->D->A\n3+6+2+6+2\n19\n\n    \n\n    \n\n        \nA->B->E->D->C->A\n3+6+4+6+8\n27\n\n    \n\n    \n\n        \nA->C->...(continued)\n...\n...\n\n    \n\n\n\n\n\nWow! Not only does that graph look WAYYYYY more complicated, expanding the problem size to 5 cities gives us a lot more routes to consider.\n\n\nAs you can see, going from just 4 cities to 5 increased our options when we start our travels by going to city B first from just two, up to six! Similarly, our total number of route combinations increased from 6 up to 24 (if you finish the above example by mapping out all the possibilities you'll see there are 24). Of course we can still eliminate duplicates and cut that number of possible routes in half down to 12... but that's still a big jump from the 3 possibilities we had previously. \n\n\nWhat's important to realize is that this travelling salesman problem is one that has a factorial growth rate! To be more exact, the formula for the number of combinations that need to be considered when the number of cities is 'X' is this:\n\n\n(X - 1)! / 2\n\n\n\n\nIf you don't quite remember how factorials are calculated, here's an example:\n\n\n4! = 1 * 2 * 3 * 4 = 24\n\n\n\n\nFactorial growth is even worse than exponential growth!!!\n\n\n\n    \nn\n  \nn! (# of permutations)\n         \n~Time to Compute\n\n    \n\n        \n4\n  \n        \n24\n                             \n        \n-\n\n    \n\n    \n\n        \n5\n  \n        \n120\n                            \n        \n-\n\n    \n\n    \n\n        \n6\n  \n        \n720\n                            \n        \n-\n\n    \n\n    \n\n        \n7\n  \n        \n5,040\n                          \n        \n-\n\n    \n\n    \n\n        \n8\n  \n        \n40,320\n                         \n        \n-\n\n    \n\n    \n\n        \n9\n  \n        \n362,880\n                        \n        \n-\n\n    \n\n    \n\n        \n10\n \n        \n3,628,800\n                      \n        \n3 seconds\n\n    \n\n    \n\n        \n11\n \n        \n39,916,800\n                     \n        \n56 seconds\n\n    \n\n    \n\n        \n12\n \n        \n479,001,600\n                    \n        \n>11 minutes\n\n    \n\n    \n\n        \n13\n \n        \n6,227,020,800\n                  \n        \n~2.5 hours\n\n    \n\n    \n\n        \n14\n \n        \n87,178,291,200\n                 \n        \n~34 hours\n\n    \n\n    \n\n        \n15\n \n        \n1,307,674,368,000\n              \n        \n~21 days\n\n    \n\n    \n\n        \n16\n \n        \n20,922,789,888,000\n             \n        \n~340 days\n\n    \n\n    \n\n        \n17\n \n        \n355,687,428,096,000\n            \n        \n~15.8 years\n\n    \n\n    \n\n        \n18\n \n        \n6,402,373,705,728,000\n          \n        \n~284 years\n\n    \n\n    \n\n        \n19\n \n        \n121,645,100,408,832,000\n        \n        \n~5,411 years\n\n    \n\n    \n\n        \n20\n \n        \n2,432,902,008,176,640,000\n      \n        \n~108,230 years\n\n    \n\n\n\n\n\nExplanation of Factorial Growth\n\n\nLooking at the table to the left, you can see that factorial growth is extremely fast! We very quickly go from small, manageable numbers like the 4! we did an example of above, to astronomically large numbers very quickly. Why this matters is that in order to brute-force a solution to the Travelling Salesman problem, we have to calculate all the routes to determine the best one. So if there are 'n' route permutations (a permutation is a set of data where the order of the data matters), then that means 'n' routes we have to consider. And since the number of possible routes is growing factorially, this quickly means huge numbers as can be seen in the table.\n\n\nIn order to give you an idea of how difficult solving the Travelling Salesman problem is for a modern computer, I decided to do some tests with my Macbook Pro, 2.4ghz Intel i7, with 16 gigs of RAM. I didn't have an exact implementation of the Travelling Salesman on hand for testing, however, I did have an implementation of the Johnson-Trotter algorithm that I wrote. The Johnson-Trotter algorithm is used to generate all the possible permutations of a number of length 'n'. For instance, if you run Johnson-Trotter on number sequences of length 3, you get the following: \n123,\n132, \n312, \n321, \n231, \n213. A total of 6 permutations, which equals 3!. \nIn other words, this is the same factorial growth, consider all the possible permutations, type of problem that we are dealing with for the Travelling Salesman. I ran this algorithm for numbers of length 10 and 11 (thus calculating all the permutations of each), and used the calculation speed gathered from those tests to make estimates for the larger numbers. I think you can see how calculating the best route for the salesman via considering all the possible routes is simply not calculatable for any reasonably large number of cities.\n\n\nIt's not all doom and gloom though! In the same way that humans can look at a map and know that traveling from LA to Boston, then to Seattle, then back to Florida is going to be a horribly inefficient route without even thinking about it, there are ways to figure out the TSP quicker than considering all the possible permutations. The current fastest methods are known as Branch and Bound methods, which you can research if you want to learn more.\n\n\nThe Knapsack Problem\n\n\nAnother problem that falls into the same NP-Complete category as the Travelling Salesman that you might find interesting is the Knapsack Problem. It goes like this: say you are a thief with a backpack that can hold a max of 50 pounds in weight. With a collection of different objects nearby of differing weights and values, you want to know what the most optimal set of items you should steal are that can fit into your pack. This problem is also a factorial growth example.\n\n\nHope these examples peaked your interest into computability!",
            "title": "Computability"
        },
        {
            "location": "/computerscience/computability/#computability",
            "text": "Modern computers are based on what's called a Turing Machine, which was the first general purpose type of computer. What can a Turing Machine based computer compute? What can\u2019t a turing machine based computer compute? \nWhat kind of problems are impractical to compute for anything other than really small data sets? We\u2019ll briefly explore these questions below.",
            "title": "Computability"
        },
        {
            "location": "/computerscience/computability/#straight-up-non-computable",
            "text": "Let's first talk about problems that current computers simply cannot compute.",
            "title": "Straight up Non-Computable"
        },
        {
            "location": "/computerscience/computability/#the-halting-problem",
            "text": "If you are a software developer, you undoubtably have encountered infinite loops. Unlike interpretted\nlanguages such as PHP which will time out, lower level languages such as C++ will just keep running in an infinite loop forever if one exists.\nWith this in mind, it may seem like a good idea for someone to create a debugging program that detects those kinds of run-time errors in apps.\nHowever, you may be surprised to learn that  the reason why no such program exists is because it's impossible for a computer to determine if an\narbitrary computer program and input will finish running or not.  To informally prove this, let's assume we have a function called \"does_it_halt\" which we can pass an arbitrary program and input to and have it\ntell us if the program will halt or loop indefinitely.   Assumption:   \nThere exists a way for a computer to detect if any arbitrary program and input will halt or not.   With that assumption, let's assume someone wrote the following function as a simple way to utilize this knowledge:  function does_it_halt(program, input) {\n    if (eventually halts)\n        return true;\n    else\n        return false;\n}  For simplicity's sake let's also say someone wrote wrapper for this function that passes the program as the input. Remember that our\ndoes_it_halt method is supposed to work on any arbitrary input, so passing in the memory location or text of a program works just fine.  function debug_app(program) {\n    return does_it_halt(program, program);\n}  Alright, hopefully you'll agree this is pretty straight forward. Now let's say someone really smart informed us that our does_it_halt function\ncouldn't possibly work, but we didn't believe him. As a result, he decided to write a cheeky little function called paradox that does the following:  function paradox(program) {\n    if(debug_app(program))\n        while(1) {};\n    else\n        return true;\n}\n\necho debug_app(paradox);  Ha ha ha... so this dude wrote a function that puts itself into an intentional infinite loop if the does_it_halt says the program stops,\nand returns \"true\" if the program does not stop. Then he follows this up by calling our debug function on his code. \nSurely this is the most useless bit of code ever written right?  Well, before we can answer that, we have to examine what happens when this dude calls debug_app(paradox).  Let's say our debug_app() method returns true when passed Paradox. Let's logically think through what that means in terms of execution:   First up, since \"echo debug_app(Paradox)\" returned True, that means that Paradox halts.  In the process of testing if Paradox halts, does_it_halt(), somewhere in its magical logic would have to run Paradox with the given input. That input is also a reference to Paradox. So the call to paradox would look like \"paradox(paradox)\".  However, inside of Paradox is also a call to debug_app()! This call to \"debug_app(program)\" within Paradox would resolve to \"debug_app(Paradox)\" at runtime.  In order for does_it_halt to detect that Paradox halts, that means the call to \"debug_app(Paradox)\" within Paradox returns False, because otherwise Paradox would send itself into an infinite loop.   Uhh oh! Turns out that little piece of code wasn't as useless as we originally thought because it just proved that our does_it_halt function can't possibly exist as we've defined it.\nWe know from point #1 above that \"echo debug_app(Paradox)\" returns true, however, we also know that in order for that to happen, the call to \"debug_app(Paradox)\" as mentioned in point #4 above must return false. So two different calls to \"debug_app(Paradox)\" are returning differing results which is impossible. As such, our premise is proved false by what's called a Proof By Contradiction.  This problem (\"will a program halt\") which is unsolvable by computers by is known commonly as The Halting Problem. Alan Turing proved back in 1936 that a general algorithm to solve it is not possible.",
            "title": "The Halting Problem"
        },
        {
            "location": "/computerscience/computability/#post-correspondance-problem-pcp",
            "text": "Another quick example just to peak your interest. Let's say you have a list of some arbitrary number of dominoes which look something like this:  \n     c \n     cb   \n     ac \n     a   \n     b \n     bc   \n     a \n     ba   \n     a \n     c   \n     c \n     ac   \n     cb \n       c   \n     aa \n     b    You want to have a computer tell you whether there's a way in which you can order the dominoes such that the sequence of the top row matches the sequence of the bottom row.\nHere's an example of a match where both the top and the bottom read \"abbcbba\":   \n     a \n     abb   \n     bb \n     c   \n     cb \n     bb   \n     ba \n     a    Can a computer program be made for you that determines if there's an ordering that results in a match for an arbitrary set of dominoes? The answer is \"no\". This is called the Post Correspondence Problem and was introduced by Emil Post back in 1946.",
            "title": "Post-Correspondance Problem (PCP)"
        },
        {
            "location": "/computerscience/computability/#effectively-uncomputable-with-our-current-algorithms",
            "text": "",
            "title": "Effectively Uncomputable (with our current algorithms)"
        },
        {
            "location": "/computerscience/computability/#p-vs-np",
            "text": "In order to discuss problems that fall into this \"effectively uncomputable\" category, we quickly need to discuss the concept of P vs. NP.\n\"P\" are a class of problems for which their exists an algorithm to both find and verify an answer in polynomial time.\n\"NP\" (non-deterministic polynomial time) are a class of problems for which there exists algorithms to verify an answer in polynomial time, but  may or may not  have algorithms to find an answer.\nNote the \"may or may not\" statement... P vs. NP is actually one of the biggest unknowns in Mathematics/CS because no-one has been able to prove definitively \nthat P = NP or that P != NP.   If P = NP, then that means there DOES exist polynomial time algorithms to solve problems we lump into this category, but that we just haven't found them yet. If P != NP, then that would confirm that no such polynomial time algorithms exist, and we could stop looking. There has been a 1 million dollar reward on the table since the year 2000 for anyone that can prove this one way or the other.  So if you're wondering at this point what the heck polynomial time is, and wishing you could remember all your math lessons from high school, no fear - let's look at an example:  x^3 + 2x^2 + 3x = A Polynomial  The importance of polynomials is that they, and anything less complex than them, can be quickly solved by computers. Equations can be generally clumped into one of a number of different time groups:  y = 1       // Constant time\ny = x       // Linear time\ny = x^2     // Polynomial time\ny = 2^x     // Exponential time\ny = x!      // Factorial time  For a more complete list of time complexities see:  Time Complexity .  The problems we will be discussing which fall into this \"practically uncomputable\" category are \"NP\" problems for which we have no good algorithms to solve them. These are technically referred to as the \"NP-Complete\" class of problems, a term coined in the 1970s by researchers who realized that these problems are all essentially variations of the same thing, and if a solution could be found for one of them, it would mean all of them could in turn be solved.  For a good video on this topic, I'd recommend the following:",
            "title": "P vs NP"
        },
        {
            "location": "/computerscience/computability/#the-travelling-salesman-problem",
            "text": "The travelling salesman problem is a certain instance of a problem that has many general purpose applications. The scenario goes like this: you are a salesman who needs to travel to a bunch of cities, and end your trip where you started in your home city. You obviously want to minimize your travel time by taking the most efficient route that takes you through all the cities.  For an example of this problem, let's use a scenario where we want to visit just 4 cities, and so starting at city A, we need to calculate the optimal route. Each city has a travel time \"cost\" to travel between them that we'll use to calculate the best route.   We are starting in city A, so we just need to evaluate all our options that take us through all the cities and add up the travel costs like so:  \n     \n         Route Route Costs Total Cost \n     \n     \n         A->B->C->D->A 3+5+6+2 16 \n     \n     \n         A->B->D->C->A 3+3+6+8 20 \n     \n     \n         A->D->C->B->A 2+6+5+3 16 \n     \n     \n         A->D->B->C->A 2+3+5+8 18 \n     \n     \n         A->C->B->D->A 8+5+3+2 18 \n     \n     \n         A->C->D->B->A 8+6+3+3 20 \n       One thing you might notice is that there's two routes that cost 16, two routes that cost 18, and two routes that cost 20. This is because one of each of these pairs is just the same route in reverse. So if you do ABCDA, it's the same route if you do it backwards as ADCBA! For this reason we can eliminate these duplicate routes, cutting our total routes to consider in half, and narrow our choices down to 3 real options. Obviously we would choose the one that costs 16.  \n     \n         Route Route Costs Total Cost \n     \n     \n         A->B->C->D->A 3+5+6+2 16 \n     \n     \n         A->B->D->C->A 3+3+6+8 20 \n     \n     \n         A->C->B->D->A 8+5+3+2 18 \n       Now what if we needed to travel between 5 cities instead of 4? How much extra work would this be to figure out? Let's call this 5th city 'E' and examine just a piece of this expanded problem by determining the routes possible when we start with city B:   \n     \n         Route Route Costs Total Cost \n     \n     \n         A->B->C->D->E->A 3+5+6+4+7 25 \n     \n     \n         A->B->C->E->D->A 3+5+2+4+2 16 \n     \n     \n         A->B->D->C->E->A 3+3+6+2+7 21 \n     \n     \n         A->B->D->E->C->A 3+3+4+2+8 20 \n     \n     \n         A->B->E->C->D->A 3+6+2+6+2 19 \n     \n     \n         A->B->E->D->C->A 3+6+4+6+8 27 \n     \n     \n         A->C->...(continued) ... ... \n       Wow! Not only does that graph look WAYYYYY more complicated, expanding the problem size to 5 cities gives us a lot more routes to consider.  As you can see, going from just 4 cities to 5 increased our options when we start our travels by going to city B first from just two, up to six! Similarly, our total number of route combinations increased from 6 up to 24 (if you finish the above example by mapping out all the possibilities you'll see there are 24). Of course we can still eliminate duplicates and cut that number of possible routes in half down to 12... but that's still a big jump from the 3 possibilities we had previously.   What's important to realize is that this travelling salesman problem is one that has a factorial growth rate! To be more exact, the formula for the number of combinations that need to be considered when the number of cities is 'X' is this:  (X - 1)! / 2  If you don't quite remember how factorials are calculated, here's an example:  4! = 1 * 2 * 3 * 4 = 24  Factorial growth is even worse than exponential growth!!!  \n     n    n! (# of permutations)           ~Time to Compute \n     \n         4   \n         24                              \n         - \n     \n     \n         5   \n         120                             \n         - \n     \n     \n         6   \n         720                             \n         - \n     \n     \n         7   \n         5,040                           \n         - \n     \n     \n         8   \n         40,320                          \n         - \n     \n     \n         9   \n         362,880                         \n         - \n     \n     \n         10  \n         3,628,800                       \n         3 seconds \n     \n     \n         11  \n         39,916,800                      \n         56 seconds \n     \n     \n         12  \n         479,001,600                     \n         >11 minutes \n     \n     \n         13  \n         6,227,020,800                   \n         ~2.5 hours \n     \n     \n         14  \n         87,178,291,200                  \n         ~34 hours \n     \n     \n         15  \n         1,307,674,368,000               \n         ~21 days \n     \n     \n         16  \n         20,922,789,888,000              \n         ~340 days \n     \n     \n         17  \n         355,687,428,096,000             \n         ~15.8 years \n     \n     \n         18  \n         6,402,373,705,728,000           \n         ~284 years \n     \n     \n         19  \n         121,645,100,408,832,000         \n         ~5,411 years \n     \n     \n         20  \n         2,432,902,008,176,640,000       \n         ~108,230 years",
            "title": "The Travelling Salesman Problem"
        },
        {
            "location": "/computerscience/computability/#explanation-of-factorial-growth",
            "text": "Looking at the table to the left, you can see that factorial growth is extremely fast! We very quickly go from small, manageable numbers like the 4! we did an example of above, to astronomically large numbers very quickly. Why this matters is that in order to brute-force a solution to the Travelling Salesman problem, we have to calculate all the routes to determine the best one. So if there are 'n' route permutations (a permutation is a set of data where the order of the data matters), then that means 'n' routes we have to consider. And since the number of possible routes is growing factorially, this quickly means huge numbers as can be seen in the table.  In order to give you an idea of how difficult solving the Travelling Salesman problem is for a modern computer, I decided to do some tests with my Macbook Pro, 2.4ghz Intel i7, with 16 gigs of RAM. I didn't have an exact implementation of the Travelling Salesman on hand for testing, however, I did have an implementation of the Johnson-Trotter algorithm that I wrote. The Johnson-Trotter algorithm is used to generate all the possible permutations of a number of length 'n'. For instance, if you run Johnson-Trotter on number sequences of length 3, you get the following: \n123,\n132, \n312, \n321, \n231, \n213. A total of 6 permutations, which equals 3!. \nIn other words, this is the same factorial growth, consider all the possible permutations, type of problem that we are dealing with for the Travelling Salesman. I ran this algorithm for numbers of length 10 and 11 (thus calculating all the permutations of each), and used the calculation speed gathered from those tests to make estimates for the larger numbers. I think you can see how calculating the best route for the salesman via considering all the possible routes is simply not calculatable for any reasonably large number of cities.  It's not all doom and gloom though! In the same way that humans can look at a map and know that traveling from LA to Boston, then to Seattle, then back to Florida is going to be a horribly inefficient route without even thinking about it, there are ways to figure out the TSP quicker than considering all the possible permutations. The current fastest methods are known as Branch and Bound methods, which you can research if you want to learn more.",
            "title": "Explanation of Factorial Growth"
        },
        {
            "location": "/computerscience/computability/#the-knapsack-problem",
            "text": "Another problem that falls into the same NP-Complete category as the Travelling Salesman that you might find interesting is the Knapsack Problem. It goes like this: say you are a thief with a backpack that can hold a max of 50 pounds in weight. With a collection of different objects nearby of differing weights and values, you want to know what the most optimal set of items you should steal are that can fit into your pack. This problem is also a factorial growth example.  Hope these examples peaked your interest into computability!",
            "title": "The Knapsack Problem"
        }
    ]
}